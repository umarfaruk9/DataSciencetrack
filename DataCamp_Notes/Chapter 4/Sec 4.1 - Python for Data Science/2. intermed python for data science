Comparison Operators

Numpy Recap

---------------Filtering Pandas DataFrame--------------------

Goal: Selext countries with area over 8m km^2
Steps:
1) Select the area column
2) Comparison on area column
3) Use result to select countries


Step 1: Get column
Want Pandas Series (single bracket) as opposed to DataFRame (double bracket)
Use
  brics["area"]
  
Step 2: To find areas greater tahn 8,
  brics["area"]>8
Will give series of True/False correspinding to which values were greater than 8

Can then store the boolean seriesas "is_huge" 
  is_huge = brics["area]>8
  
Step 3: Then to select countries, can do
  brics[is_huge]
  
To combine steps 1-3, just do
  brics[brics["area"]>8]
  
 
 Using Boolean operators in conjuction with filtering Data:
For example, want to combine multiple conditions

import numpy as np  #import numpy to use boolean oprators on arrays

np.logical_and(brics["area"]>8,brics{"area"]<10)   # want logical vector of countries where area is greater than 8 and less than 10

brics[np.logical_and(brics["area"]>8,brics["area"]<10)]   #using the logical vector above, subset the brics data to get the rows



>>>>>>>>>> Code Snippet
# Import cars data
import pandas as pd
cars = pd.read_csv('cars.csv', index_col = 0)

# Extract drives_right column as Series: dr
dr = cars['drives_right']

# Use dr to subset cars: sel
sel = cars[dr]

# Print sel
print(sel)

>>>>>>>>>>>> Code Snippet
# Import cars data
import pandas as pd
cars = pd.read_csv('cars.csv', index_col = 0)

# Convert code to a one-liner
sel = cars[cars['drives_right']]

# Print sel
print(sel)

>>>>>>>>>>>>>> Code Snippet
# Import cars data
import pandas as pd
cars = pd.read_csv('cars.csv', index_col = 0)

# Create car_maniac: observations that have a cars_per_cap over 500
cpc = cars['cars_per_cap']
many_cars = cpc>500
car_maniac=cars[many_cars]

# Print car_maniac
print(car_maniac)


>>>>>>>>>> Code Snippet:
# Import cars data
import pandas as pd
cars = pd.read_csv('cars.csv', index_col = 0)

# Option 1: Create car_maniac: observations that have a cars_per_cap over 500
cpc = cars['cars_per_cap']
many_cars = cpc>500
car_maniac=cars[many_cars]

# Print car_maniac
print(car_maniac)

# Option 2: 
car_maniac = cars[cars['cars_per_cap']>500]
print(car_maniac)


>>>>>>>>>> Code Snippet: Combining Numpy Operators on a Pandas Series
# Import cars data
import pandas as pd
cars = pd.read_csv('cars.csv', index_col = 0)

# Import numpy, you'll need this
import numpy as np

# Create medium: observations with cars_per_cap between 100 and 500
cpc = cars['cars_per_cap']
medium = cars[np.logical_and(cpc>100, cpc<500)]

# Print medium
print(medium)



---------------While Loops--------------------

>>>>>>>>> Basic While Loop : Code Snippet
# Initialize offset
offset = 8

# Code the while loop
while offset != 0:
    print("correcting...")
    offset = offset -1
    print(offset)
    
    
>>>>>>>>>> Add Conditionals:     
# Initialize offset
offset = -6

# Code the while loop
while offset != 0 :
    print("correcting...")
    if offset > 0:
        offset = offset - 1
    else: 
        offset = offset + 1
    print(offset)
    
    
-------------------for-loops-----------
for var in seq :
expression

Interpretation: "for each var in seq, execute expression"

ex: 
  fam = [1.73, 1.86, 1.71, 1.89]
  print(fam)
  
  for height in fam : 
    print(height)
    
    
    #what if you want to print out the index as well?
    for index, height in enumerate(fam) : 
      print("index " + str(inde) + ": " + str(height))
      
      
      
    >>>>>>>> Code Snippet: Indexes and Lists
    # areas list
areas = [11.25, 18.0, 20.0, 10.75, 9.50]

# Change for loop to use enumerate() and update print()
for x,y in enumerate(areas):
    print("room "+str(x) +": "+str(y))
    
    
    >>>>>>> Loop over List of Lists
    # house list of lists
house = [["hallway", 11.25], 
         ["kitchen", 18.0], 
         ["living room", 20.0], 
         ["bedroom", 10.75], 
         ["bathroom", 9.50]]
         
# Build a for loop from scratch
for x in house:
        print("the "+x[0]+" is "+str(x[1])+" sqm")
        
        
        
-------------- Looping Over Data Sctructures -------------------part 1
For example - Dictionary

world = {
            "afghanistant":30.55,
            "albania":2.77,
            "algeria":39.21
            }

How to print key and key-value pair: Use items method
print(key + "----" + str(value))

Because dictionaries are inherently unordered structures, will not print in ordered sequence

What about numpy arrays?

            import numpy as np
            np_height = np.array([1.73, 1.68, 1.71, 1.89, 1.79])
            np_weight = np.array([65.4, 59.2, 63.6, 88.4, 68.7])
            bmi = np_weight / np_height ** 2
            meas = np.array([np_height, np_weight])

            for val in bmi :
              print(val)  ## will print a single array in this case


            for val in meas:
              print(val)     ### will print an entire array on each run

            #### If want to get each item printed out, then use nditer()
            for val in np.nditer(meas) : 
              print(val)
  

Recap: 
If you want to iterate over a dictionary, use:
  for key, val in my_dict.items() :
  
If you want to iterate over a Numpy array:
  for val in np.nditer(my_array) : 


>>>>>>>>>>>>>>>> Loop Over Dictionary: 
          # Definition of dictionary
          europe = {'spain':'madrid', 'france':'paris', 'germany':'berlin',
                    'norway':'oslo', 'italy':'rome', 'poland':'warsaw', 'austria':'vienna' }

          # Iterate over europe
          for x, y in europe.items():
              print("the capital of "+x+" is "+y)


>>>>>>>>>> Loop over Numpy array


          # Import numpy as np
          import numpy as np

          # For loop over np_height    ####### np_height is a Numpy array
          for h in np.nditer(np_height):
              print(str(h)+" inches")

          # For loop over np_baseball    ######### np_baseball is a 2D array
          for b in np.nditer(np_baseball):
              print(b)



---------------------------- Looping Over Data Structures, part 2 _______________________
What about Pandas data frames? 
In Pandas you have to explicitly mention you want to iterate over the rows
by using the iterrows() methods

The iterrows() method looks at the data frame and on each iteration generates two pieces of data: 
the label of the row and then the actual data in the row as a Pandas Series

          import pandas as pd
          brics = pd.read_csv("brics.csv",index_col=0)

          for lab, row in brics.iterrows() :
              print(lab)
              print(row)

In the first iteration, lab is BR (as in Brazil) abd row is the entire Panda series
Because this row variable on each iteration is a Series, 
you can easily select additional information from it using the subsetting techniques you learned about earlier

What if you only wanted to print the ca[pital of the countr fo example? 
Could instead dom

        import pandas as pd
        brics = pd.read_csv("brics.csv", index_col=0)

        for lab, row in brics.iterrows() :
            print(lab + ": " + row["capital"])
    
What aboout adding a column? 
Method 1: Creating Series on  every iteration --- Fine for small DF's but pain in the ass for Big DF's (imagine trillions of rows)
Let's add an additional column that has the number of characters in a country's name
        import pandas as pd
        brics = pd.read_csv("brics.csv", index_col=0) 
        
        for lab, row in brics.iterrows() :      ### Specification of for-loop can be same as we need row labale and row data
               brics.loc[lab, "name_length"] = len(row["country"])                          ### len(row["country"])  < - Next, we can calculate the length of each country name by selecting the country column from row and then passing it to the len() function, that determines the number of characters in a string
         print(brics)                                                              ### brics.loc[lab, "name_length"] <- Finally we'll neeed to add new information to a new column name_length at the appropirate location



Method 2: Use apply()
Calculate an entire DF by applying a function on a particular column in an element-wise fashion

        import pandas as pd
        brics = pd.read_csv("brics.csv", index_col=0) 
        
        brics["name_length"] = brics["country"].apply(len)
        print(brics)



>>>>>>>>>>>> Loop Over DataFrame:
            # Import cars data
            import pandas as pd
            cars = pd.read_csv('cars.csv', index_col = 0)

            # Adapt for loop -- instead of getting a Panda Series, select variable to print out using bracket notation 

            for lab, row in cars.iterrows() :
                print(str(lab) + ": " + str(row['cars_per_cap']))


>>>>>>>>>>>>>>> Add Column - #1 using the more inefficient itterows
            # Import cars data
            import pandas as pd
            cars = pd.read_csv('cars.csv', index_col = 0)

            # Code for loop that adds COUNTRY column
            for lab, row in cars.iterrows() : 
                cars.loc[lab,"COUNTRY"] = (row["country"]).upper()


            # Print cars
            print(cars)



>>>>>>>>>>>>>>>>>>>>>> Add Column - #2 Using the more efficient apply

              # Import cars data
              import pandas as pd
              cars = pd.read_csv('cars.csv', index_col = 0)

              # Use .apply(str.upper)
              cars["COUNTRY"]= cars["country"].apply(str.upper)

              print(cars)





---------------------------------------- Random Numbers _____________________________________
Random Generators
          import numpy as np
          np.random.rand()
          np.random.seed(123)



Simulate a Coin Tosss

        import numpy as np
        np.random.seed(123)              ##### seed: sets the random seed, so that your results are the reproducible between simulations. As an argument, it takes an integer of your choosing. If you call the function, no output will be generated.
        coin = np.random.randint(0,2)
        print(coin)
        if coin == 0:
            print("heads")
        else: 
            print("tails")



>>>>>>>>>>>> Random Float:
          # Import numpy as np
          import numpy as np

          # Set the seed
          np.random.seed(123)

          # Generate and print random float
          coin = np.random.rand()      #### rand() : if you don't specify any arguments, it generates a random float between zero and one.
          print(coin)



>>>>>>>>>>>> Roll the Dice
          # Import numpy and set seed
          import numpy as np
          np.random.seed(123)

          # Use randint() to simulate a dice
          print(np.random.randint(1,7))


          # Use randint() again
          print(np.random.randint(1,7))



>>>>>>>>>>>>>>> Determine your next move:
          # Numpy is imported, seed is set

          # Starting step
          step = 50

          # Roll the dice
          dice = np.random.randint(1,7)

          # Finish the control construct
          if dice <= 2 :
              step = step - 1
          elif dice <= 5 :
              step = step + 1
          else :
              step = step + np.random.randint(1,7)

          # Print out dice and step
          print(dice)
          print(step)




------------------------------ Random Walk ----------------------------------------
A sccuession of random steps is a random walk
In order to recor d the values, need to 
List below is random but it's not a random walk because the items in the list aren't based on the previous values

          import numpy as np
          np.random.seed(123)
          outcomes = []           ### Initializes an empty list
          for x in range(10) :           ###### will be run 10 times
              coin = np.random.randint(0,2)
              if coin == 0:
                  outcomes.append("heads")
              else:
                   outcomes.append("tails")
          print(outcomes)         

Can turn the above code into a random walk by tracking the total number of tails while you're simulating the game

Start by creating a list of tails that already contains the number 0, because at the start, you haven't thrown any tails
Then you again start a for-loop that runs 10 times, suing the range function.
In there, you again generate a random number. 
Instead of an if-else structure, can simplify things. 
if coin thrown is 0 then things shouldn;t change. 
If a 1 is generated the number if tails should be incremented by 1. 
Means you can just add coin to the previous number of tails and add this count to the list with append. 
Finally, again print the list of tails.


                import numpy as np
                np.random.seed(123)
                tails = [0]
                for x in range(10) :
                    coin = np.random.randint(0,2)
                    tails.append(tails[x] + coin)
                print(tails)    





>>>>>>>>>>>>>>> The Next Step

                # Numpy is imported, seed is set

                # Initialize random_walk
                random_walk = [0]

                # Complete the ___
                for x in range(100) :
                    # Set step: last element in random_walk
                    step = random_walk[-1]

                    # Roll the dice
                    dice = np.random.randint(1,7)

                    # Determine next step
                    if dice <= 2:
                        step = step - 1
                    elif dice <= 5:
                        step = step + 1
                    else:
                        step = step + np.random.randint(1,7)

                    # append next_step to random_walk
                    random_walk.append(step)

                # Print random_walk
                print(random_walk)



>>>>>>>>>>>>>>>> Changing code to ensure it doesn't go negative

                # Numpy is imported, seed is set

                # Initialize random_walk
                random_walk = [0]

                for x in range(100) :
                    step = random_walk[-1]
                    dice = np.random.randint(1,7)

                    if dice <= 2:
                        # Replace below: use max to make sure step can't go below 0
                        step = max(step - 1,0)
                    elif dice <= 5:
                        step = step + 1
                    else:
                        step = step + np.random.randint(1,7)

                    random_walk.append(step)

                print(random_walk)

>>>>>>>>>>>>>>> Visualize the Walk
                # Numpy is imported, seed is set

                # Initialization
                random_walk = [0]

                for x in range(100) :
                    step = random_walk[-1]
                    dice = np.random.randint(1,7)

                    if dice <= 2:
                        step = max(0, step - 1)
                    elif dice <= 5:
                        step = step + 1
                    else:
                        step = step + np.random.randint(1,7)

                    random_walk.append(step)

                # Import matplotlib.pyplot as plt
                import matplotlib.pyplot as plt

                # Plot random_walk
                plt.plot(random_walk)


                # Show the plot
                plt.show()



----------------------------------------Distribution ----------------------------------------------
Each random walk has an endpoint with a distribution of end points
Want to visualize the end points and get the probability ended on a certain value


              import numpy as np
              import matplotlib.pyplot as plt
              np.radnom.seed(123)
              final_tails = []
              for x in range(10000) :    ###As you increase the number of times experiment is done it will approach analytical distribution
                  tails = [0]
                  for x in range(10) :
                      coin = np.random.randint(0,2)
                      tails.append(tails[x] + coin)
                  final_tails.append(tails[-1])
              plt.hist(final_tails, bins = 10)
              plt.show()


>>>>>>>>>>>>>>>>>>>> Simulate multiple walks
                    # Numpy is imported; seed is set

                    # Initialize all_walks to am empty list
                    all_walks = []

                    # Simulate random walk 10 times
                    for i in range(10) :

                        # Code from before
                        random_walk = [0]
                        for x in range(100) :
                            step = random_walk[-1]
                            dice = np.random.randint(1,7)

                            if dice <= 2:
                                step = max(0, step - 1)
                            elif dice <= 5:
                                step = step + 1
                            else:
                                step = step + np.random.randint(1,7)
                            random_walk.append(step)

                        # After random walk array is entirely populated, Append random_walk to all_walks
                        all_walks.append(random_walk)

                    # Print all_walks
                    print(all_walks)




>>>>>>>>>>>>>>>>>>>>>>> Visualize All Walks


                        # numpy and matplotlib imported, seed set.

                        # initialize and populate all_walks
                        all_walks = []
                        for i in range(10) :
                            random_walk = [0]
                            for x in range(100) :
                                step = random_walk[-1]
                                dice = np.random.randint(1,7)
                                if dice <= 2:
                                    step = max(0, step - 1)
                                elif dice <= 5:
                                    step = step + 1
                                else:
                                    step = step + np.random.randint(1,7)
                                random_walk.append(step)
                            all_walks.append(random_walk)

                        # Convert all_walks to Numpy array: np_aw
                        np_aw = np.array(all_walks)

                        # Plot np_aw and show
                        plt.plot(np_aw)
                        plt.show()

                        # Clear the figure
                        plt.clf()

                        # Transpose np_aw: np_aw_t
                        np_aw_t = np.transpose(np_aw)

                        # Plot np_aw_t and show
                        plt.plot(np_aw_t)
                        plt.show()



>>>>>>>>>>>>>>>>> Implement clumsiness



                          # numpy and matplotlib imported, seed set

                          # Simulate random walk 250 times
                          all_walks = []
                          for i in range(250) :
                              random_walk = [0]
                              for x in range(100) :
                                  step = random_walk[-1]
                                  dice = np.random.randint(1,7)
                                  if dice <= 2:
                                      step = max(0, step - 1)
                                  elif dice <= 5:
                                      step = step + 1
                                  else:
                                      step = step + np.random.randint(1,7)

                                  # Implement clumsiness
                                  if np.random.rand() <= 0.001 :
                                      step = 0

                                  random_walk.append(step)
                              all_walks.append(random_walk)

                          # Create and plot np_aw_t
                          np_aw_t = np.transpose(np.array(all_walks))
                          plt.plot(np_aw_t)
                          plt.show()




>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Plot the distribution


                          # numpy and matplotlib imported, seed set

                          # Simulate random walk 500 times
                          all_walks = []
                          for i in range(500) :
                              random_walk = [0]
                              for x in range(100) :
                                  step = random_walk[-1]
                                  dice = np.random.randint(1,7)
                                  if dice <= 2:
                                      step = max(0, step - 1)
                                  elif dice <= 5:
                                      step = step + 1
                                  else:
                                      step = step + np.random.randint(1,7)
                                  if np.random.rand() <= 0.001 :
                                      step = 0
                                  random_walk.append(step)
                              all_walks.append(random_walk)

                          # Create and plot np_aw_t
                          np_aw_t = np.transpose(np.array(all_walks))

                          # Select last row from np_aw_t: ends
                          ends = np_aw_t[-1]

                          # Plot histogram of ends, display plot
                          plt.hist(ends)
                          plt.show()









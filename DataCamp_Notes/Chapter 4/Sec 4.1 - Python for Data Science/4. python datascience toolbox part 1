Course Description
It's now time to push forward and develop your Python chops even further. There are lots and lots of fantastic functions in Python and its library ecosystem. However, as a Data Scientist, you'll constantly need to write your own functions to solve problems that are dictated by your data. The art of function writing is what you'll learn in this first Python Data Science toolbox course. You'll come out of this course being able to write your very own custom functions, complete with multiple parameters and multiple return values, along with default arguments and variable-length arguments. You'll gain insight into scoping in Python and be able to write lambda functions and handle errors in your very own function writing practice. On top of this, you'll wrap up each Chapter by diving into using your acquired skills to write functions that analyze twitter DataFrames and are generalizable to broader Data Science contexts.


--------------------------------WRITING YOR OWN FUNCTIONS---------------------------------------------------------
_______________________________User Defined Functions______________________________________________________________________

In this vourse will learn how to do the following:
1) Defined functions without parameters
2) Defined functions with one parameter
3) Define functions that return a value

In later sectons, will leanr how to defined functions with multiple arguments and functions tha return multiple values


Built-in functions
  - Let's check out python's built in function str, which accepts an object such as a number and return a string object
          x = str(5)
          print(x)
          print(type(x))
          
          ### You can assign a str to a variable to store its return value

Defining a function
        We'll see how to define functions via an example, a funtion that squares a number
        To define the function we begin with the keyword def followed by the function's name
        
        def square():   ### <-- functuon header
                new_value = 4 ** 2
                print(new_value)   ###<-- function body (indented)
                
                
        def square(value):   ### <-- functuon header -- Number here is parameter
                new_value = value ** 2
                print(new_value)   ###<-- function body (indented) 
                
        square(4)               ####< Number here is an argument        
        
        
        
   What if we don't want to print it but want to return it directly? 
   You can have your function return the new value by adding the return ketword followed by the value to return
   
          def square(value):
                  new_value = value ** 2
                  return new_v
                  
                  
Another essential aspect of writing functions in Oython: docstrings
-Describes what your function does, such as the computations it performs or its return values
-These descriptions serve as documentation for your functions so that anyone who reads yur funtions's docstrings understand what your funtion does without having to trace through all the code in the function definition
-Placed in the immediate line after the function headr
-In btween triple double quotes """

ex: 
        
       def square(value):
              """Return the square of a value."""
              new_value = value ** 2
              return new_value
              
              
              
                  
 ----------------------------------------------------------------------------------------------------------------------------------------
 Strings in Python
In the video, you learned of another standard Python datatype, strings. Recall that these represent textual data. To assign the string 'DataCamp' to a variable company, you execute:

company = 'DataCamp'
You've also learned to use the operations + and * with strings. Unlike with numeric types such as ints and floats, the + operator concatenates strings together, while the * concatenates multiple copies of a string together. In this exercise, you will use the + and * operations on strings to answer the question below. Execute the following code in the shell:

object1 = "data" + "analysis" + "visualization"
object2 = 1 * 3
object3 = "1" * 3
What are the values in object1, object2, and object3, respectively?


     Recapping built-in functions
In the video, Hugo briefly examined the return behavior of the built-in functions print() and str(). Here, you will use both functions and examine their return values. A variable x has been preloaded for this exercise. Run the code below in the console. Pay close attention to the results to answer the question that follows.

Assign str(x) to a variable y1: y1 = str(x)
Assign print(x) to a variable y2: y2 = print(x)
Check the types of the variables x, y1, and y2.
What are the types of x, y1, and y2?             
                  
                  
                  
                  
  ___________________________________________________________________________________________________________________-
  Write a simple function
In the last video, Hugo described the basics of how to define a function. You will now write your own function!

Define a function, shout(), which simply prints out a string with three exclamation marks '!!!' at the end. The code for the square() function that we wrote earlier is found below. You can use it as a pattern to define shout().

def square():
    new_value = 4 ** 2
    return new_value
Note that the function body is indented 4 spaces already for you. Function bodies need to be indented by a consistent number of spaces and the choice of 4 is common.

>>>>>>>>>>>>>> Code Snippet:
# Define the function shout
def shout():
    """Print a string with three exclamation marks"""
    # Concatenate the strings: shout_word
    shout_word = 'congratulations'+'!!!'

    # Print shout_word
    print(shout_word)

# Call shout
shout()

--------------------------------------------------------------------------------------------------------------------------
Single-parameter functions
Congratulations! You have successfully defined and called your own function! That's pretty cool.

In the previous exercise, you defined and called the function shout(), which printed out a string concatenated with '!!!'. You will now update shout() by adding a parameter so that it can accept and process any string argument passed to it. Also note that shout(word), the part of the header that specifies the function name and parameter(s), is known as the signature of the function. You may encounter this term in the wild!

Complete the function header by adding the parameter name, word.
Assign the result of concatenating word with '!!!' to shout_word.
Print the value of shout_word.
Call the shout() function, passing to it the string, 'congratulations'.

# Define shout with the parameter, word
def shout(word):
    """Print a string with three exclamation marks"""
    # Concatenate the strings: shout_word
    shout_word = word + '!!!'

    # Print shout_word
    print(shout_word)

# Call shout with the string 'congratulations'
shout('congratulations')



------------------------------------------------------------------------------------------------------------------------

Functions that return single values
You're getting very good at this! Try your hand at another modification to the shout() function so that it now returns a single value instead of printing within the function. Recall that the return keyword lets you return values from functions. Parts of the function shout(), which you wrote earlier, are shown. Returning values is generally more desirable than printing them out because, as you saw earlier, a print() call assigned to a variable has type NoneType.


In the function body, concatenate the string in word with '!!!' and assign to shout_word.
Replace the print() statement with the appropriate return statement.
Call the shout() function, passing to it the string, 'congratulations', and assigning the call to the variable, yell.
To check if yell contains the value returned by shout(), print the value of yell.

>>>>>>>>>>> 
# Define shout with the parameter, word
def shout(word):
    """Return a string with three exclamation marks"""
    # Concatenate the strings: shout_word
    shout_word = word + '!!!'

    # Replace print with return
    return(shout_word)

# Pass 'congratulations' to shout: yell
yell = shout('congratulations')

# Print yell
print(yell)

                  
  ___________________________________________________________________________________________________________________
  
    Multiple Function Parameters
    
                  
   -Accept more than 1 parameter
   
                ex:    def raise_to_power(value1, value2):
                              """Raise value1 to the power of value2."""
                              new_value = value1 ** value2
                              return new_value
                              
  Make sure to change function name and docs strings to reflect new behavior
  
  Call function: # pf arguments  = # of parameters
          -The order in which the arguments are passed correpsond to the order of the parameters in the function header
         
  You can also make your function return multiple values
  You do that by constructing objects known as tuples in your functions
  
  A quick jump into tuples
          - Make functions return multiple values
          -Tupes:
                  -Like a list - can contain multple values
                  Immutable - can;t modufy values
                  Constucted using parentheses()
                  
                  ex: 
                  even_nums = (2,4,6)
                  print(type(even_nums))
                
         
         
  Unpacking tuples
          -Unpack tuple into several variables
          
          even_nums = (2,4,6)
          a,b,c = even_nums
          print(a)
          print(b)
          
    
    
Accessing tuple elements
-Accessing tuple elements like you do with lists:
        
        ex: 
                even_nums = (2,4,6)
                print(even_nums[1])
                second_num = even_nums[1]
  -Uses zero indexing               
                
                
  
                  
   Let's now modify the prior example
   
   
   def raise_both(value1, value2):
   """Raise value1 to the power of value2 and vice versa"""
   
   new_value1 = value1 ** value2
   new_value2 = value2 ** value1
   
   new_tuple = (new_value1, new_value2)
   
   return new_tuple
   
   ________________________________________________________________________________________________________________

    Functions with multiple parameters
Hugo discussed the use of multiple parameters in defining functions in the last lecture. You are now going to use what you've learned to modify the shout() function further. Here, you will modify shout() to accept two arguments. Parts of the function shout(), which you wrote earlier, are shown.


   Modify the function header such that it accepts two parameters, word1 and word2, in that order.
Concatenate each of word1 and word2 with '!!!' and assign to shout1 and shout2, respectively.
Concatenate shout1 and shout2 together, in that order, and assign to new_shout.
Pass the strings 'congratulations' and 'you', in that order, to a call to shout(). Assign the return value to yell.

# Define shout with parameters word1 and word2
def shout(word1, word2):
    """Concatenate strings with three exclamation marks"""
    # Concatenate word1 with '!!!': shout1
    shout1 = word1 + '!!!'
    
    # Concatenate word2 with '!!!': shout2
    shout2 = word2 + '!!!'
    
    # Concatenate shout1 with shout2: new_shout
    new_shout = shout1 + shout2

    # Return new_shout
    return new_shout

# Pass 'congratulations' and 'you' to shout(): yell
yell = shout('congratulations','you')

# Print yell
print(yell)

                  
                  
 __________________________________________________________________________________________________________
                 
   A brief introduction to tuples
Alongside learning about functions, you've also learned about tuples! Here, you will practice what you've learned about tuples: how to construct, unpack, and access tuple elements. Recall how Hugo unpacked the tuple even_nums in the video:

a, b, c = even_nums

A three-element tuple named nums has been preloaded for this exercise. Before completing the script, perform the following:

Print out the value of nums in the IPython shell. Note the elements in the tuple.
In the IPython shell, try to change the first element of nums to the value 2 by doing an assignment: nums[0] = 2. What happens?
INSTRUCTIONS
100 XP
Unpack nums to the variables num1, num2, and num3.
Construct a new tuple, even_nums composed of the same elements in nums, but with the 1st element replaced with the value, 2.

# Unpack nums into num1, num2, and num3
num1, num2, num3 = nums

# Construct even_nums
even_nums=(2, num2, num3)


____________________________________________________________________________________________________________


Functions that return multiple values
In the previous exercise, you constructed tuples, assigned tuples to variables, and unpacked tuples. Here you will return multiple values from a function using tuples. Let's now update our shout() function to return multiple values. Instead of returning just one string, we will return two strings with the string !!! concatenated to each.

Note that the return statement return x, y has the same result as return (x, y): the former actually packs x and y into a tuple under the hood!

INSTRUCTIONS
100 XP
Modify the function header such that the function name is now shout_all, and it accepts two parameters, word1 and word2, in that order.
Concatenate the string '!!!' to each of word1 and word2 and assign to shout1 and shout2, respectively.
Construct a tuple shout_words, composed of shout1 and shout2.
Call shout_all() with the strings 'congratulations' and 'you' and assign the result to yell1 and yell2 (remember, shout_all() returns 2 variables!).


# Define shout_all with parameters word1 and word2
def shout_all(word1, word2):
    
    # Concatenate word1 with '!!!': shout1
    shout1 = word1 + '!!!'
    
    # Concatenate word2 with '!!!': shout2
    shout2 = word2 + '!!!'
    
    # Construct a tuple with shout1 and shout2: shout_words
    shout_words = (shout1,shout2)

    # Return shout_words
    return shout_words

# Pass 'congratulations' and 'you' to shout_all(): yell1, yell2
yell1, yell2 = shout_all('congratulations','you')

# Print yell1 and yell2
print(yell1)
print(yell2)


___________________________________________________________________________________________________________________________


You've Leared:
-How to write functions 
        -Accept multiple parameters
        -Return multiple values
        
-Up next: Functions for analyzing Twitter data
      -Functiom you write will return a dictinary containing data of how many times each language was used across al tweets in the DataFrame
      -Later on in the course we'll see we can write generalized fntions to count occurrences of any items in a DataFrame column. 


   Let's now recap the basic ingredients of a function
   -
                  
                  
                  
     _________________________________________________________________________________________________________
     Bringing it all together (1)
You've got your first taste of writing your own functions in the previous exercises. You've learned how to add parameters to your own function definitions, return a value or multiple values with tuples, and how to call the functions you've defined.

In this and the following exercise, you will bring together all these concepts and apply them to a simple data science problem. You will load a dataset and develop functionalities to extract simple insights from the data.

For this exercise, your goal is to recall how to load a dataset into a DataFrame. The dataset contains Twitter data and you will iterate over entries in a column to build a dictionary in which the keys are the names of languages and the values are the number of tweets in the given language. The file tweets.csv is available in your current directory.

INSTRUCTIONS
100 XP
Import the pandas package with the alias pd.
Import the file 'tweets.csv' using the pandas function read_csv(). Assign the resulting DataFrame to df.
Complete the for loop by iterating over col, the 'lang' column in the DataFrame df.
Complete the bodies of the if-else statements in the for loop: if the key is in the dictionary langs_count, add 1 to its current value, else add the key to langs_count and set its value to 1. Use the loop variable entry in your code.
                  
                  

# Import pandas
import pandas as pd

# Import Twitter data as DataFrame: df
df = pd.read_csv('tweets.csv')

# Initialize an empty dictionary: langs_count
langs_count = {}

# Extract column from DataFrame: col
col = df['lang']

# Iterate over lang column in DataFrame
for entry in col:

    # If the language is in langs_count, add 1
    if entry in langs_count.keys():
        langs_count[entry] += 1
    # Else add the language to langs_count, set the value to 1
    else:
        langs_count[entry] = 1

# Print the populated dictionary
print(langs_count)


__________________________________________________________________________________________________________________________________

  Bringing it all together (2)
Great job! You've now defined the functionality for iterating over entries in a column and building a dictionary with keys the names of languages and values the number of tweets in the given language.

In this exercise, you will define a function with the functionality you developed in the previous exercise, return the resulting dictionary from within the function, and call the function with the appropriate arguments.

For your convenience, the pandas package has been imported as pd and the 'tweets.csv' file has been imported into the tweets_df variable.

Define the function count_entries(), which has two parameters. The first parameter is df for the DataFrame and the second is col_name for the column name.
Complete the bodies of the if-else statements in the for loop: if the key is in the dictionary langs_count, add 1 to its current value, else add the key to langs_count and set its value to 1. Use the loop variable entry in your code.
Return the langs_count dictionary from inside the count_entries() function.
Call the count_entries() function by passing to it tweets_df and the name of the column, 'lang'. Assign the result of the call to the variable result.



# Define count_entries()
def count_entries(df, col_name):
    """Return a dictionary with counts of 
    occurrences as value for each key."""

    # Initialize an empty dictionary: langs_count
    langs_count = {}
    
    # Extract column from DataFrame: col
    col = df[col_name]
    
    # Iterate over lang column in DataFrame
    for entry in col:

        # If the language is in langs_count, add 1
        if entry in langs_count.keys():
            langs_count[entry] += 1
        # Else add the language to langs_count, set the value to 1
        else:
            langs_count[entry] = 1

    # Return the langs_count dictionary
    return langs_count

# Call count_entries(): result
result = count_entries(tweets_df, 'lang')

# Print the result
print(result)

_______________________________________________________________________________________________________________________________

Topic: Scope and User-Defined Functions

Crash Course on Scope in Functions

        - Idea of scope in the context of user-defined functions
        - Not all objects are accessible everywhere in a script
        - Scope - part of the program where an object or name may be accessible
                -Names refer to the variables or, more generally, objects such as functions that are defined in your program, for example, a variable X has a name as does the function sum. 
                
        -There are three types of scopes that you should know - 
                1) Global Scope - defined in the main body of a script or a python program
                2) Local Scope -defined inside of a function; once the execution of a function is done, any name inside the local scope ceases to exist, which means you cannot access those names anymore outside of the function definition
                3) Built-in Scope - names in the pre-defined built-ins module (such as print, sum)
                  
        
            
        Global vs Local Scope - Example 1:
        
                    new_val = 10
                    
                    def square(value):
                            """Returns the square of a number."""
                            new_val = value ** 2
                            return new_val
                            
                            
                    ### Anytime we call the name in the global scope, it will access the name in the global, as you see here
                    Anytime we call the name in the local scope of the function, it will look first in the local scope
                    If Python cannot find the name in the local scope, it will then and only then look in the global scope
                    
        
   
   
   
        Global vs Local Scope - Example 2:
        
                    new_val = 10
                    
                    def square(value):
                            """Returns the square of a number."""
                            new_val2 = new_value ** 2
                            return new_val2
                            
                            
                    ### Here for example we access new_val defined globally within the function square 
                    Note that the global value accessed is the value at the time the function is called, not the value when the function is defined
                    Thus if we re-assign new_val and call the function square, we see that the new value of new_val is accessed
                    
                    To recap, when we reference a name, first the local scope is searched and then the global
                    If the name is in neither then the built-in scope is searched
                    
                    
        What if we want to alter the value of a global name within a function call? - This is where the keyword global comes in handy. 
        Global vs. Local Scope - Example 3
        
                       
   
                new_val = 10
                
                def square(val):
                        """Returns the square of a number."""
                        global new_val                                            ###Keyword global followed by the name of the global variable we wish to access and alter
                        new_val = new_val ** 2                                   ### Example: We changed new_val 
                        return new_val
                        
                        
   
   
   
   
   ________________________________________________________________________________________________________________
The keyword global
Let's work more on your mastery of scope. In this exercise, you will use the keyword global within a function to alter the value of a variable defined in the global scope.

INSTRUCTIONS
100 XP
Use the keyword global to alter the object team in the global scope.
Change the value of team in the global scope to the string "justice league". Assign the result to team.
Hit the Submit button to see how executing your newly defined function change_team() changes the value of the name team!


   >>>>>>>>>>>>>>>> Code Snippet: 
   # Create a string: team
team = "teen titans"

# Define change_team()
def change_team():
    """Change the value of the global variable team."""
    
    # Use team in global scope
    global team

    # Change the value of team in global: team
    team = "justice league"
# Print team
print(team)

# Call change_team()
change_team()

# Print team
print(team)

_______________________________________________________________________________________________________________________________


 Python's built-in scope
Here you're going to check out Python's built-in scope, which is really just a built-in module called builtins. However, to query builtins, you'll need to import builtins 'because the name builtins is not itself built in...No, I’m serious!' (Learning Python, 5th edition, Mark Lutz). After executing import builtins in the IPython Shell, execute dir(builtins) to print a list of all the names in the module builtins. Have a look and you'll see a bunch of names that you'll recognize! Which of the following names is NOT in the module builtins?  
   
In [1]: import builtins

In [2]: dir(builtins)
Out[2]: 
['ArithmeticError',
 'AssertionError',
 'AttributeError',
 'BaseException',
 'BlockingIOError',
 'BrokenPipeError',
 'BufferError',
 'BytesWarning',
 'ChildProcessError',
 'ConnectionAbortedError',
 'ConnectionError',
 'ConnectionRefusedError',
 'ConnectionResetError',
 'DeprecationWarning',
 'EOFError',
 'Ellipsis',
 'EnvironmentError',
 'Exception',
 'False',
 'FileExistsError',
 'FileNotFoundError',
 'FloatingPointError',
 'FutureWarning',
 'GeneratorExit',
 'IOError',
 'ImportError',
 'ImportWarning',
 'IndentationError',
 'IndexError',
 'InterruptedError',
 'IsADirectoryError',
 'KeyError',
 'KeyboardInterrupt',
 'LookupError',
 'MemoryError',
 'NameError',
 'None',
 'NotADirectoryError',
 'NotImplemented',
 'NotImplementedError',
 'OSError',
 'OverflowError',
 'PendingDeprecationWarning',
 'PermissionError',
 'ProcessLookupError',
 'RecursionError',
 'ReferenceError',
 'ResourceWarning',
 'RuntimeError',
 'RuntimeWarning',
 'StopAsyncIteration',
 'StopIteration',
 'SyntaxError',
 'SyntaxWarning',
 'SystemError',
 'SystemExit',
 'TabError',
 'TimeoutError',
 'True',
 'TypeError',
 'UnboundLocalError',
 'UnicodeDecodeError',
 'UnicodeEncodeError',
 'UnicodeError',
 'UnicodeTranslateError',
 'UnicodeWarning',
 'UserWarning',
 'ValueError',
 'Warning',
 'ZeroDivisionError',
 '_',
 '__IPYTHON__',
 '__IPYTHON__active',
 '__build_class__',
 '__debug__',
 '__doc__',
 '__import__',
 '__loader__',
 '__name__',
 '__package__',
 '__spec__',
 'abs',
 'all',
 'any',
 'ascii',
 'bin',
 'bool',
 'bytearray',
 'bytes',
 'callable',
 'chr',
 'classmethod',
 'compile',
 'complex',
 'copyright',
 'credits',
 'delattr',
 'dict',
 'dir',
 'divmod',
 'dreload',
 'enumerate',
 'eval',
 'exec',
 'filter',
 'float',
 'format',
 'frozenset',
 'get_ipython',
 'getattr',
 'globals',
 'hasattr',
 'hash',
 'help',
 'hex',
 'id',
 'input',
 'int',
 'isinstance',
 'issubclass',
 'iter',
 'len',
 'license',
 'list',
 'locals',
 'map',
 'max',
 'memoryview',
 'min',
 'next',
 'object',
 'oct',
 'open',
 'ord',
 'pow',
 'print',
 'property',
 'range',
 'repr',
 'reversed',
 'round',
 'set',
 'setattr',
 'slice',
 'sorted',
 'staticmethod',
 'str',
 'sum',
 'super',
 'tuple',
 'type',
 'vars',
 'zip']

In [3]: 

_______________________________________________________________________________________________________

   
Nested Functions
   
   
What if we have a function inner defined within another function outer and we reference a name x in the inner function?
The answer is intuitive: Python searches the local scope of the function inner then if it doesn't find x it searches the scope of the function outer, which is called an enclosing function because it encloses the function inner
If Python can't find x in the scope of the enclosing function it only then searches the global scope and then the built-in scope. 


def outer(...):
      """..."""
      x = ...
      
      def inner(...):
              """..."""
              y= x ** 2
              
      return ...
      
      
   But whoa, hold on there for a second, why are we even nesting functions? 
   There are a number of good reasnons to do so. Let's say that we want to use a process a number of times within a function. 
   
   For example, we want a function that takes 3 numbers as parameters and performs the same function on each of them. 
   One way would be to write out the computation three times but this is unscaleable.  
   
          def mod2plus5(x1, x2, x3):
                  """Returns the remainder plus 5 of three values"""
                  
                  new_x1 = x1 % 2 + 5
                  new_x2 = x2 % 2 + 5
                  new_x3 = x3 % 2 + 5
                  
                  return( new_x1, new_x2, new_x3)
   
   
   
   
   
   What we can do instead is define an inner function within our function definition and call it where necessary as we do here:
   This is called a nested function, the syntax for the inner function is exactly the same as that for any other function.
   
  
   def mod2plus5(x1, x2, x3):
          """Returns the remainder plus 5 of three values."""
          
          def inner(x):
                  """Returns the remainder plus 5 of a value."""
                  return x % 2 + 5
                  
          return( inner(x1), inner(x2), inner(x3))        
   
   
Returning Functions
        - Another important use case of nested functions
                - We define a function, raise_vals, which contains an inner function
  

               def raise_val(n):
                      """Return the inner function."""
                      
                      def inner(x):
                      """Raise x to the power of n."""
                              raised = x ** n
                              return raised
                              
                       return inner       
                  
                  
 Using nonlocal
 =Reall that in our disucssions about scope you can use the keyword global in function definitions to creat and change global names; similarly, in a nested function you can use the keyword nonlocal to create and change names in an enclosing scope
 
        def outer():
                """Prints the value of n."""
                n=1
                
                def inner():
                        nonlocal n   ###In this example we alter the value of n in the inner function; because we used the keyword nonlocal, it also alters the value of n in the enclosing scope
                        n = 2
                        print(n)
                        
                inner()
                print(n)
                  
                  
 - This is why calling the function outer prints the value of n as detrmined within the function inner
 
 
 To summarize:
 name references search at most 4 scopes,
 -the local scope
 -then those of enclosing functions
 -then global
 -then built in
 
 LEGB rule!
 Also remember that assigning names will only create or hange local names, unless they are declared in global or nonlocal statements using the keyword global or the keyword nonlocal, respectively
 
 
 ________________________________________________________________________________________________________________________
Nested Functions I
You've learned in the last video about nesting functions within functions. One reason why you'd like to do this is to avoid writing out the same computations within functions repeatedly. There's nothing new about defining nested functions: you simply define it as you would a regular function with def and embed it inside another function!

In this exercise, inside a function three_shouts(), you will define a nested function inner() that concatenates a string object with !!!. three_shouts() then returns a tuple of three elements, each a string concatenated with !!! using inner(). Go for it!

INSTRUCTIONS
100 XP
INSTRUCTIONS
100 XP
Complete the function header of the nested function with the function name inner() and a single parameter word.
Complete the return value: each element of the tuple should be a call to inner(), passing in the parameters from three_shouts() as arguments to each call.
     
     
     
   # Define three_shouts
def three_shouts(word1, word2, word3):
    """Returns a tuple of strings
    concatenated with '!!!'."""

    # Define inner
    def inner(word):
        """Returns a string concatenated with '!!!'."""
        return word + '!!!'

    # Return a tuple of strings
    return (inner(word1),inner(word2), inner(word3))

# Call three_shouts() and print
print(three_shouts('a', 'b', 'c'))

___________________________________________________________________________________________________________________________


Nested Functions II
Great job, you've just nested a function within another function. One other pretty cool reason for nesting functions is the idea of a closure. This means that the nested or inner function remembers the state of its enclosing scope when called. Thus, anything defined locally in the enclosing scope is available to the inner function even when the outer function has finished execution.

Let's move forward then! In this exercise, you will complete the definition of the inner function inner_echo() and then call echo() a couple of times, each with a different argument. Complete the exercise and see what the output will be!

INSTRUCTIONS
100 XP
INSTRUCTIONS
100 XP
Complete the function header of the inner function with the function name inner_echo() and a single parameter word1.
Complete the function echo() so that it returns inner_echo.
We have called echo(), passing 2 as an argument, and assigned the resulting function to twice. Your job is to call echo(), passing 3 as an argument. Assign the resulting function to thrice.
Hit Submit to call twice() and thrice() and print the results.



# Define echo
def echo(n):
    """Return the inner_echo function."""

    # Define inner_echo
    def inner_echo(word1):
        """Concatenate n copies of word1."""
        echo_word = word1 * n
        return echo_word

    # Return inner_echo
    return inner_echo

# Call echo: twice
twice = echo(2)

# Call echo: thrice
thrice = echo(3)

# Call twice() and thrice() then print
print(twice('hello'), thrice('hello'))

__________________________________________________________________________________________________________________


The keyword nonlocal and nested functions
Let's once again work further on your mastery of scope! In this exercise, you will use the keyword nonlocal within a nested function to alter the value of a variable defined in the enclosing scope.

INSTRUCTIONS
100 XP
Assign to echo_word the string word, concatenated with itself.
Use the keyword nonlocal to alter the value of echo_word in the enclosing scope.
Alter echo_word to echo_word concatenated with '!!!'.
Call the function echo_shout(), passing it a single argument 'hello'.


 # Define echo_shout()
def echo_shout(word):
    """Change the value of a nonlocal variable"""
    
    # Concatenate word with itself: echo_word
    echo_word = word * 2
    
    # Print echo_word
    print(echo_word)
    
    # Define inner function shout()
    def shout():
        """Alter a variable in the enclosing scope"""    
        # Use echo_word in nonlocal scope
        nonlocal echo_word
        
        # Change echo_word to echo_word concatenated with '!!!'
        echo_word = echo_word + '!!!'
    
    # Call function shout()
    shout()
    
    # Print echo_word
    print(echo_word)

# Call function echo_shout() with argument 'hello'
echo_shout('hello')                 
                  
  __________________________________________________Default and Flexible Arguments_________________________________________________________________________

Default arguments and flexible arguments 
      Let's say  you're writing a functon that takes multiple parameters & that there is a common values for some of these parameters.
			In this case you would like to be able to call the function without explicityly specifiying every parameter. 
			In other words you would like some parameters to have default arguments that are used when it isn't specified otherwise. 

In this unit, you'll learn to:
	-Write functions with default arguments
	Use flexible arguments which allow ypu to pass any number of arguments to a functions
	
	
Add a default argument
	-First up to define a function with a default argument value in the function header, we follow the parameter of interest with an equals sign and the default argument value. 
	-Notice this function raises the first argument to the power of the second argument and the default 2nd argument value is 1. 
	
	ex: 
	def power(number, pow=1):
			"""Raise number to the power of now."""
			new_value = number ** pow
			return new_value
			
	So you can call the function using 2 arguments as you would expect but if you use only one argument then it uses the default value. 
	
	
Let's now look at a flexible argument:
		Let's say that you want to write a function but aren't sure how many arguments a user will want to pass it
		
		Flexible arguments:  *args(1)
		For example, a function that takes floats or ints adn adds them all up, irrespective of how many there are.
		In this example we write the function that sums up all the arguments passed to it. 
		In the function definition, we use the parameter star followed by args: this then turns all the arguments passed to a function call into a tuple called args in the functon body;
			then, in the funcition body, to write our desired function, we initialize our sum sum_all to 0, loop over the tuple args and add each element of it successively to sum_all and then return it.
		We can now call our function add_all with any number of arguments to add them all up!
		
		
		def add_all(*args):
				"""Sum all values in *args together."""
				
				# Initialize sum 
                  		sum_all = 0
				
				#Accumulate the sum
				for num in args:
					sum_all += num
					
				return sum_all	
                  
                  
                Flexible Arguments: **kwargs
		Can also use a double star to pass arbitrary number of keyword arguments, also called kwargs, that is arguments preceded by identifiers.    
		
		We'll write a function  that prints the identifiers and parameters passed to them as you see here.
		Now to write such a function we'll use the parameter kwargs preceded by a double star.
		This turns the identyifier -keyword pairs into a dictionary within the function body. 
		Then in the functiuon body all we need to do is to print all the key-value pairs stored in the dictionary kwargs. 
		Note that it is not the names args and kwargs that are important when using flexible arguments, but rather that they're preceded by a single and double start, respectively. 
		
		
		
		def print_all(**kwargs):
				"""Print out key-value pairs in **kwargs."""
				
				# Print out the key-value pairs
				for key, value in kwargs.items():
					print(key + ": "+value)
		print_all(name="Hugo", employer="DataCamp")
		
_________________________________________________________________________________________________________________________________

Functions with one default argument
In the previous chapter, you've learned to define functions with more than one parameter and then calling those functions by passing the required number of arguments. In the last video, Hugo built on this idea by showing you how to define functions with default arguments. You will practice that skill in this exercise by writing a function that uses a default argument and then calling the function a couple of times.

INSTRUCTIONS
100 XP
Complete the function header with the function name shout_echo. It accepts an argument word1 and a default argument echo with default value 1, in that order.
Use the * operator to concatenate echo copies of word1. Assign the result to echo_word.
Call shout_echo() with just the string, "Hey". Assign the result to no_echo.
Call shout_echo() with the string "Hey" and the value 5 for the default argument, echo. Assign the result to with_echo.

# Define shout_echo
def shout_echo(word1, echo=1):
    """Concatenate echo copies of word1 and three
     exclamation marks at the end of the string."""

    # Concatenate echo copies of word1 using *: echo_word
    echo_word = word1 * echo

    # Concatenate '!!!' to echo_word: shout_word
    shout_word = echo_word + '!!!'

    # Return shout_word
    return shout_word

# Call shout_echo() with "Hey": no_echo
no_echo = shout_echo("Hey")

# Call shout_echo() with "Hey" and echo=5: with_echo
with_echo = shout_echo("Hey",echo=5)

# Print no_echo and with_echo
print(no_echo)
print(with_echo)

________________________________________________________________________________________________________________________________

Functions with multiple default arguments
You've now defined a function that uses a default argument - don't stop there just yet! You will now try your hand at defining a function with more than one default argument and then calling this function in various ways.

After defining the function, you will call it by supplying values to all the default arguments of the function. Additionally, you will call the function by not passing a value to one of the default arguments - see how that changes the output of your function!

INSTRUCTIONS
100 XP
INSTRUCTIONS
100 XP
Complete the function header with the function name shout_echo. It accepts an argument word1, a default argument echo with default value 1 and a default argument intense with default value False, in that order.
In the body of the if statement, make the string object echo_word upper case by applying the method .upper() on it.
Call shout_echo() with the string, "Hey", the value 5 for echo and the value True for intense. Assign the result to with_big_echo.
Call shout_echo() with the string "Hey" and the value True for intense. Assign the result to big_no_echo.



# Define shout_echo
def shout_echo(word1, echo=1, intense=False):
    """Concatenate echo copies of word1 and three
    exclamation marks at the end of the string."""

    # Concatenate echo copies of word1 using *: echo_word
    echo_word = word1 * echo

    # Capitalize echo_word if intense is True
    if intense is True:
        # Capitalize and concatenate '!!!': echo_word_new
        echo_word_new = echo_word.upper() + '!!!'
    else:
        # Concatenate '!!!' to echo_word: echo_word_new
        echo_word_new = echo_word + '!!!'

    # Return echo_word_new
    return echo_word_new

# Call shout_echo() with "Hey", echo=5 and intense=True: with_big_echo
with_big_echo = shout_echo("Hey", echo=5,intense=True)

# Call shout_echo() with "Hey" and intense=True: big_no_echo
big_no_echo = shout_echo("Hey",intense=True)

# Print values
print(with_big_echo)
print(big_no_echo)

_______________________________________________________________________________________________________________________________

Functions with variable-length arguments (*args)
Flexible arguments enable you to pass a variable number of arguments to a function. In this exercise, you will practice defining a function that accepts a variable number of string arguments.

The function you will define is gibberish() which can accept a variable number of string values. Its return value is a single string composed of all the string arguments concatenated together in the order they were passed to the function call. You will call the function with a single string argument and see how the output changes with another call using more than one string argument. Recall from the previous video that, within the function definition, args is a tuple.

INSTRUCTIONS
100 XP
INSTRUCTIONS
100 XP
Complete the function header with the function name gibberish. It accepts a single flexible argument *args.
Initialize a variable hodgepodge to an empty string.
Return the variable hodgepodge at the end of the function body.
Call gibberish() with the single string, "luke". Assign the result to one_word.
Hit the Submit button to call gibberish() with multiple arguments and to print the value to the Shell.



# Define gibberish
def gibberish(*args):
    """Concatenate strings in *args together."""

    # Initialize an empty string: hodgepodge
    hodgepodge=""

    # Concatenate the strings in args
    for word in args:
        hodgepodge += word

    # Return hodgepodge
    return hodgepodge

# Call gibberish() with one string: one_word
one_word = gibberish("luke")

# Call gibberish() with five strings: many_words
many_words = gibberish("luke", "leia", "han", "obi", "darth")

# Print one_word and many_words
print(one_word)
print(many_words)

_______________________________________________________________________________________________________________________________
Functions with variable-length keyword arguments (**kwargs)
Let's push further on what you've learned about flexible arguments - you've used *args, you're now going to use **kwargs! What makes **kwargs different is that it allows you to pass a variable number of keyword arguments to functions. Recall from the previous video that, within the function definition, kwargs is a dictionary.

To understand this idea better, you're going to use **kwargs in this exercise to define a function that accepts a variable number of keyword arguments. The function simulates a simple status report system that prints out the status of a character in a movie.

INSTRUCTIONS
100 XP
INSTRUCTIONS
100 XP
Complete the function header with the function name report_status. It accepts a single flexible argument **kwargs.
Iterate over the key-value pairs of kwargs to print out the keys and values, separated by a colon ':'.
In the first call to report_status(), pass the following keyword-value pairs: name="luke", affiliation="jedi" and status="missing".
In the second call to report_status(), pass the following keyword-value pairs: name="anakin", affiliation="sith lord" and status="deceased".

# Define report_status
def report_status(**kwargs):
    """Print out the status of a movie character."""

    print("\nBEGIN: REPORT\n")

    # Iterate over the key-value pairs of kwargs
    for key, value in kwargs.items():
        # Print out the keys and values, separated by a colon ':'
        print(key + ": " + value)

    print("\nEND REPORT")

# First call to report_status()
report_status(name="luke", affiliation="jedi", status="missing")

# Second call to report_status()
report_status(name="anakin", affiliation="sith lord", status="deceased")
____________________________________________________________________________________________________________________________

Bringing It All Together

Recall that in a previous chapter you wrote a function tjat would take a DataFra,eof twitter data and return a dictionary containing languages as keys and the number of times a tweet was written in a given language as values


In the following exercises, you will write a function that takes a DataFrame and returns a dictionary with counts of any occurences for any column
By default however it will process a column called lang
This generalizes the previous function that you wrote.

You will then generalize this further so you can pass the function a DataFrame and a ny number of column names to perform the computation on an arbitrary number of columns

Next Exercises:
	1- Count occurences for any column
	2- Count occurrences for an arbitrary number of columns
	
	Let's remind ourselves of the techniques necessary: recall that to define a function with a default argument, all that you need to do is provide that argument in the function header as you can see here.
	
____________________________________________________________________________________________________________________________

Bringing it all together (1)
Recall the Bringing it all together exercise in the previous chapter where you did a simple Twitter analysis by developing a function that counts how many tweets are in certain languages. The output of your function was a dictionary that had the language as the keys and the counts of tweets in that language as the value.

In this exercise, we will generalize the Twitter language analysis that you did in the previous chapter. You will do that by including a default argument that takes a column name.

For your convenience, pandas has been imported as pd and the 'tweets.csv' file has been imported into the DataFrame tweets_df. Parts of the code from your previous work are also provided.

INSTRUCTIONS
100 XP
INSTRUCTIONS
100 XP
Complete the function header by supplying the parameter for a DataFrame df and the parameter col_name with a default value of 'lang' for the DataFrame column name.
Call count_entries() by passing the tweets_df DataFrame and the column name 'lang'. Assign the result to result1. Note that since 'lang' is the default value of the col_name parameter, you don't have to specify it here.
Call count_entries() by passing the tweets_df DataFrame and the column name 'source'. Assign the result to result2.

# Define count_entries()
def count_entries(df, col_name ='lang'):
    """Return a dictionary with counts of
    occurrences as value for each key."""

    # Initialize an empty dictionary: cols_count
    cols_count = {}

    # Extract column from DataFrame: col
    col = df[col_name]
    
    # Iterate over the column in DataFrame
    for entry in col:

        # If entry is in cols_count, add 1
        if entry in cols_count.keys():
            cols_count[entry] += 1

        # Else add the entry to cols_count, set the value to 1
        else:
            cols_count[entry] = 1

    # Return the cols_count dictionary
    return cols_count

# Call count_entries(): result1
result1 = count_entries(tweets_df)

# Call count_entries(): result2
result2 = count_entries(tweets_df, col_name='source')

# Print result1 and result2
print(result1)
print(result2)

_______________________________________________________________________________________________________________________

Bringing it all together (2)
Wow, you've just generalized your Twitter language analysis that you did in the previous chapter to include a default argument for the column name. You're now going to generalize this function one step further by allowing the user to pass it a flexible argument, that is, in this case, as many column names as the user would like!

Once again, for your convenience, pandas has been imported as pd and the 'tweets.csv' file has been imported into the DataFrame tweets_df. Parts of the code from your previous work are also provided.

INSTRUCTIONS
100 XP
Complete the function header by supplying the parameter for the dataframe df and the flexible argument *args.
Complete the for loop within the function definition so that the loop occurs over the tuple args.
Call count_entries() by passing the tweets_df DataFrame and the column name 'lang'. Assign the result to result1.
Call count_entries() by passing the tweets_df DataFrame and the column names 'lang' and 'source'. Assign the result to result2.



# Define count_entries()
def count_entries(df, *args):
    """Return a dictionary with counts of
    occurrences as value for each key."""
    
    #Initialize an empty dictionary: cols_count
    cols_count = {}
    
    # Iterate over column names in args
    for col_name in args:
    
        # Extract column from DataFrame: col
        col = df[col_name]
    
        # Iterate over the column in DataFrame
        for entry in col:
    
            # If entry is in cols_count, add 1
            if entry in cols_count.keys():
                cols_count[entry] += 1
    
            # Else add the entry to cols_count, set the value to 1
            else:
                cols_count[entry] = 1

    # Return the cols_count dictionary
    return cols_count

# Call count_entries(): result1
result1 = count_entries(tweets_df, 'lang')

# Call count_entries(): result2
result2 = count_entries(tweets_df, 'lang', 'source')

# Print result1 and result2
print(result1)
print(result2)

_____________________________________Lanbda Functions________________________________________________________________________________________

Called lambda function because you use the keywprd labda 

Here we re-write our function raise_to_power as a labda function
		raise_to_power = labda x,y: x**y
		raise_to_power(2,3)
		
		
To create a lambda function, after the keyword lambda, specify the names of the arguments;  then we use a colon followed by the expression that specific what we wish the function to return
Lambda functions allow you to write functions ina quick & potentially dirty way so wouldnt advise to use the all the time but tere are situations where they can come in handy

Anonymous functions
For example, check out the map function which takes two arguments, a function and a sequence such as a list that applies the function over all elements of the sequence
We can pass lambda functions to map without even naming them and in this case we refer to them as anonymous functions

		map(func, seq)
		
In this example, we use map on a lambda funcion that squares all elements of a list and we'll store the result in square_all
Printing (square_all) reveals that it is actually a map object. So to see what it contains, we use the function list to turn it into a list and print the results to the shell. 


		nums = [48,6,9,21,1]
		square_all = map(lambda num: num ** 2, nums)





>>>>>> Code Snippet: 
Writing a lambda function you already know
Some function definitions are simple enough that they can be converted to a lambda function. By doing this, you write less lines of code, which is pretty awesome and will come in handy, especially when you're writing and maintaining big programs. In this exercise, you will use what you know about lambda functions to convert a function that does a simple task into a lambda function. Take a look at this function definition:

def echo_word(word1, echo):
    """Concatenate echo copies of word1."""
    words = word1 * echo
    return words
The function echo_word takes 2 parameters: a string value, word1 and an integer value, echo. It returns a string that is a concatenation of echo copies of word1. Your task is to convert this simple function into a lambda function.

INSTRUCTIONS
100 XP
Define the lambda function echo_word using the variables word1 and echo. Replicate what the original function definition for echo_word() does above.
Call echo_word() with the string argument 'hey' and the value 5, in that order. Assign the call to result.


# Define echo_word as a lambda function: echo_word
echo_word = (lambda word1, echo: word1 * echo)

# Call echo_word: result
result = echo_word('hey',5)

# Print result
print(result)


__________________________________________________________________________________________________________________
>>>>>>>>>>>> Code Snippet:

Map() and lambda functions
So far, you've used lambda functions to write short, simple functions as well as to redefine functions with simple functionality. The best use case for lambda functions, however, are for when you want these simple functionalities to be anonymously embedded within larger expressions. What that means is that the functionality is not stored in the environment, unlike a function defined with def. To understand this idea better, you will use a lambda function in the context of the map() function.

Recall from the video that map() applies a function over an object, such as a list. Here, you can use lambda functions to define the function that map() will use to process the object. For example:

nums = [2, 4, 6, 8, 10]

result = map(lambda a: a ** 2, nums)
You can see here that a lambda function, which raises a value a to the power of 2, is passed to map() alongside a list of numbers, nums. The map object that results from the call to map() is stored in result. You will now practice the use of lambda functions with map(). For this exercise, you will map the functionality of the add_bangs() function you defined in previous exercises over a list of strings.

INSTRUCTIONS
100 XP
In the map() call, pass a lambda function that concatenates the string '!!!' to a string item; also pass the list of strings, spells. Assign the resulting map object to shout_spells.
Convert shout_spells to a list and print out the list.


# Create a list of strings: spells
spells = ["protego", "accio", "expecto patronum", "legilimens"]

# Use map() to apply a lambda function over spells: shout_spells
shout_spells = map(lambda item: item + '!!!', spells)

# Convert shout_spells to a list: shout_spells_list
shout_spells_list = list(shout_spells)

# Convert shout_spells into a list and print it
print(shout_spells_list)


_________________________________________________________________________________________________________-


>>>>>>>>>>>>>>>>>>>>> Code Snippet: 
Filter() and lambda functions
In the previous exercise, you used lambda functions to anonymously embed an operation within map(). You will practice this again in this exercise by using a lambda function with filter(), which may be new to you! The function filter() offers a way to filter out elements from a list that don't satisfy certain criteria.

Your goal in this exercise is to use filter() to create, from an input list of strings, a new list that contains only strings that have more than 6 characters.

INSTRUCTIONS
100 XP
In the filter() call, pass a lambda function and the list of strings, fellowship. The lambda function should check if the number of characters in a string member is greater than 6; use the len() function to do this. Assign the resulting filter object to result.
Convert result to a list and print out the list.

# Create a list of strings: fellowship
fellowship = ['frodo', 'samwise', 'merry', 'pippin', 'aragorn', 'boromir', 'legolas', 'gimli', 'gandalf']

# Use filter() to apply a lambda function over fellowship: result
result = filter(lambda item: len(item) > 6 , fellowship)

# Convert result to a list: result_list
result_list = list(result)

# Convert result into a list and print it
print(result_list)


______________________________________________________________________________________________________________________________
Reduce() and lambda functions
You're getting very good at using lambda functions! Here's one more function to add to your repertoire of skills. The reduce() function is useful for performing some computation on a list and, unlike map() and filter(), returns a single value as a result. To use reduce(), you must import it from the functools module.

Remember gibberish() from a few exercises back?

# Define gibberish
def gibberish(*args):
    """Concatenate strings in *args together."""
    hodgepodge = ''
    for word in args:
        hodgepodge += word
    return hodgepodge
gibberish() simply takes a list of strings as an argument and returns, as a single-value result, the concatenation of all of these strings. In this exercise, you will replicate this functionality by using reduce() and a lambda function that concatenates strings together.

INSTRUCTIONS
100 XP
Import the reduce function from the functools module.
In the reduce() call, pass a lambda function that takes two string arguments item1 and item2 and concatenates them; also pass the list of strings, stark. Assign the result to result. The first argument to reduce() should be the lambda function and the second argument is the list stark.

# Import reduce from functools
from functools import reduce

# Create a list of strings: stark
stark = ['robb', 'sansa', 'arya', 'brandon', 'rickon']

# Use reduce() to apply a lambda function over stark: result
result = reduce(lambda item1, item2: item1 + item2,stark)

# Print the result
print(result)

____________________________________________________________________________________________________________________
Introduction to Error Handling

A function should throw an error if you use it rong
For ex: float() returns a floating point from a number or string, under the condition that the string corresponds to a number


Passing valid Arguments:
Ex: 
	def sqrt(x):
		"""Returns he square root of a number."""
		return x ** (0.5)



Errors and Exeptions
	-Exceptions - caught during execution 
	-Catch exceptions with try-exept clause -  main way to catch such exceptions, in which Python tries to run the code following try and if it can, all is well
	-if it cannot due to anexception, it runs the code following except 
	
	
	
	ex: 
		def sqrt(x):
			"""Returns the square root of a number."""
			try:
				retun x ** 0.5
			except:
				print('x must be an int or float')
	
	
	
	We may also wish to only cach Type Errors and let other errors pass through, in which case we would use typeError as you can see here. 
	
	
	
		ex: 
		def sqrt(x):
			"""Returns the square root of a number."""
			try:
				retun x ** 0.5
			except TypeError:
				print('x must be an int or float')
	
	
	More often than not, rathernthan just printing the error message we may want to actually raise an error by using the keyword raise 
	For example, our sqrt function may return a complex number when we supply a negative argument, which we may notwant to allow 
	Then using an if clause we can raise a ValueError for cases in which the user passes the function a negative number.
	
		ex: 
			def sqrt(x):
				"""Returns the square root of a number."""
				if x < 0:
					raise ValueError('x must be non-negative')
				try:
					retun x ** 0.5
				except TypeError:
					print('x must be an int or float')
	
	
	
	
	
_______________________________________________________________________________________________________________
Error handling with try-except
A good practice in writing your own functions is also anticipating the ways in which other people (or yourself, if you accidentally misuse your own function) might use the function you defined.

As in the previous exercise, you saw that the len() function is able to handle input arguments such as strings, lists, and tuples, but not int type ones and raises an appropriate error and error message when it encounters invalid input arguments. One way of doing this is through exception handling with the try-except block.

In this exercise, you will define a function as well as use a try-except block for handling cases when incorrect input arguments are passed to the function.

Recall the shout_echo() function you defined in previous exercises; parts of the function definition are provided in the sample code. Your goal is to complete the exception handling code in the function definition and provide an appropriate error message when raising an error.

INSTRUCTIONS
100 XP
Initialize the variables echo_word and shout_words to empty strings.
Add the keywords try and except in the appropriate locations for the exception handling block.
Use the * operator to concatenate echo copies of word1. Assign the result to echo_word.
Concatenate the string '!!!' to echo_word. Assign the result to shout_words.

>>>>>>>>>>>>>>Code Snippet:

# Define shout_echo
def shout_echo(word1, echo=1):
    """Concatenate echo copies of word1 and three
    exclamation marks at the end of the string."""

    # Initialize empty strings: echo_word, shout_words
    echo_word =''
    shout_words=''
    

    # Add exception handling with try-except
    try:
        # Concatenate echo copies of word1 using *: echo_word
        echo_word = word1 * echo

        # Concatenate '!!!' to echo_word: shout_words
        shout_words = echo_word + '!!!'
    except:
        # Print error message
        print("word1 must be a string and echo must be an integer.")

    # Return shout_words
    return shout_words

# Call shout_echo
shout_echo("particle", echo="accelerator")


______________________________________________________________________________________________________________________
Error handling by raising an error
Another way to raise an error is by using raise. In this exercise, you will add a raise statement to the shout_echo() function you defined before to raise an error message when the value supplied by the user to the echo argument is less than 0.

The call to shout_echo() uses valid argument values. To test and see how the raise statement works, simply change the value for the echo argument to a negative value. Don't forget to change it back to valid values to move on to the next exercise!

INSTRUCTIONS
100 XP
Complete the if statement by checking if the value of echo is less than 0.
In the body of the if statement, add a raise statement that raises a ValueError with message 'echo must be greater than 0' when the value supplied by the user to echo is less than 0.

>>>>>>>>>>>>>>>>> Code Snippet:
# Define shout_echo
def shout_echo(word1, echo=1):
    """Concatenate echo copies of word1 and three
    exclamation marks at the end of the string."""

    # Raise an error with raise
    if echo < 0:
        raise ValueError('echo must be greater than 0')

    # Concatenate echo copies of word1 using *: echo_word
    echo_word = word1 * echo

    # Concatenate '!!!' to echo_word: shout_word
    shout_word = echo_word + '!!!'

    # Return shout_word
    return shout_word

# Call shout_echo
shout_echo("particle", echo=5)



____________________________________Bringing it all together\_______________________________________________________________________


Will apply error messages and handling to the DataFrake analyzer: let's say someone passes your function the name of a column that isn't a column in the DataFrame that they pass it; you'll want to let them know!


In the following interactivr exercises you'll write error messages using two methods that you've learned:


_________________________________________________________________________________________________________
Bringing it all together (1)
This is awesome! You have now learned how to write anonymous functions using lambda, how to pass lambda functions as arguments to other functions such as map(), filter(), and reduce(), as well as how to write errors and output custom error messages within your functions. You will now put together these learnings to good use by working with a Twitter dataset. Before practicing your new error handling skills,in this exercise, you will write a lambda function and use filter() to select retweets, that is, tweets that begin with the string 'RT'.

To help you accomplish this, the Twitter data has been imported into the DataFrame, tweets_df. Go for it!

INSTRUCTIONS
100 XP
In the filter() call, pass a lambda function and the sequence of tweets as strings, tweets_df['text']. The lambda function should check if the first 2 characters in a tweet x are 'RT'. Assign the resulting filter object to result. To get the first 2 characters in a tweet x, use x[0:2]. To check equality, use a Boolean filter with ==.
Convert result to a list and print out the list.

>>>>>>>>>Code Snippet:
	# Select retweets from the Twitter DataFrame: result
result = filter(lambda x: x[0:2]=='RT' , tweets_df['text'])

# Create list from filter object result: res_list
res_list = list(result)

# Print all retweets in res_list
for tweet in res_list:
    print(tweet)

	
	_________________________________________________________________________________________________________

Bringing it all together (2)
Sometimes, we make mistakes when calling functions - even ones you made yourself. But don't fret! In this exercise, you will improve on your previous work with the count_entries() function in the last chapter by adding a try-except block to it. This will allow your function to provide a helpful message when the user calls your count_entries() function but provides a column name that isn't in the DataFrame.

Once again, for your convenience, pandas has been imported as pd and the 'tweets.csv' file has been imported into the DataFrame tweets_df. Parts of the code from your previous work are also provided.

INSTRUCTIONS
100 XP
Add a try block so that when the function is called with the correct arguments, it processes the DataFrame and returns a dictionary of results.
Add an except block so that when the function is called incorrectly, it displays the following error message: 'The DataFrame does not have a ' + col_name + ' column.'.


>>>>>>>>>> Code Snippet:

	# Define count_entries()
def count_entries(df, col_name='lang'):
    """Return a dictionary with counts of
    occurrences as value for each key."""

    # Initialize an empty dictionary: cols_count
    cols_count = {}

    # Add try block
    try:
        # Extract column from DataFrame: col
        col = df[col_name]
        
        # Iterate over the column in dataframe
        for entry in col:
    
            # If entry is in cols_count, add 1
            if entry in cols_count.keys():
                cols_count[entry] += 1
            # Else add the entry to cols_count, set the value to 1
            else:
                cols_count[entry] = 1
    
        # Return the cols_count dictionary
        return cols_count

    # Add except block
    except:
        print('The DataFrame does not have a ' + col_name + ' column.')

# Call count_entries(): result1
result1 = count_entries(tweets_df, 'lang')

# Print result1
print(result1)

___________________________________________________________________________________________________________________

Bringing it all together (3)
In the previous exercise, you built on your function count_entries() to add a try-except block. This was so that users would get helpful messages when calling your count_entries() function and providing a column name that isn't in the DataFrame. In this exercise, you'll instead raise a ValueError in the case that the user provides a column name that isn't in the DataFrame.

Once again, for your convenience, pandas has been imported as pd and the 'tweets.csv' file has been imported into the DataFrame tweets_df. Parts of the code from your previous work are also provided.

INSTRUCTIONS
100 XP
If col_name is not a column in the DataFrame df, raise a ValueError 'The DataFrame does not have a ' + col_name + ' column.'.
Call your new function count_entries() to analyze the 'lang' column of tweets_df. Store the result in result1.
Print result1. This has been done for you, so hit 'Submit Answer' to check out the result. In the next exercise, you'll see that it raises the necessary ValueErrors.



>>>>>>>> Code Snippet:

# Define count_entries()
def count_entries(df, col_name='lang'):
    """Return a dictionary with counts of
    occurrences as value for each key."""
    
    # Raise a ValueError if col_name is NOT in DataFrame
    if col_name not in df.columns:
        raise ValueError('The DataFrame does not have a ' + col_name + ' column.')

    # Initialize an empty dictionary: cols_count
    cols_count = {}
    
    # Extract column from DataFrame: col
    col = df[col_name]
    
    # Iterate over the column in DataFrame
    for entry in col:

        # If entry is in cols_count, add 1
        if entry in cols_count.keys():
            cols_count[entry] += 1
            # Else add the entry to cols_count, set the value to 1
        else:
            cols_count[entry] = 1
        
        # Return the cols_count dictionary
    return cols_count

# Call count_entries(): result1
result1 = count_entries(tweets_df, 'lang')

# Print result1
print(result1)


_____________________________________________________________________________________________________________________________


What You've Learned:

	-Write functions that accept single and multiple arguments
	-Write functions that return one or many values
	-Use default, flexible, and keyword arguments
	-Global and local scope in function
	-Write lambda functions
	-Handless errors
















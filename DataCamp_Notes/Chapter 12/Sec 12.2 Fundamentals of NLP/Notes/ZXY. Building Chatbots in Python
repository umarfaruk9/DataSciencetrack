Building Chatbots in Python

Course Description
When done well, interacting with a computer through human language is incredibly powerful and also quite fun. Messaging and Voice-Controlled devices are the next big platforms, and conversational computing has a big role to play in creating engaging augmented and virtual reality experiences. This course will get you started on the path towards building such applications! There are a number of unique challenges to building these kinds of programs. The most obvious one is of course - how do I turn human language into machine instructions? In this course, you'll tackle this first with rule-based systems and then with machine learning. Some chat systems are designed to be useful, while others are just good fun. You will build one of each, and finally put everything together to make a helpful, friendly chatbot! And once you complete the course, you can learn how to connect your chatbot to Facebook Messenger!

=====================================================================================================================================


1
Chatbots 101
FREE
0%
In this chapter, you'll learn how to build your first chatbot! After gaining a bit of historical context, you'll set up a basic structure for receiving text and responding to users, and then learn how to add the basic elements of personality. You'll then build rule-based systems for parsing text.


Course content
Implementing smalltalk, ELIZA style
How to use regex and ML to extract meaning from free-form text
Build chatbots that can
Query a database
Plan a trip
Help you order coffee
Handling statefulness



EchoBot I
In [1]: USER: Hello!
Out[1]: BOT: I can hear you, you said: 'Hello!'
In [2]: USER: How are you?
Out[2]: BOT: I can hear you, you said: 'How are you?'


EchoBot II
In [1]: def respond(message):
: return "I can hear you! you said: {}".format(message)
In [2]: def send_message(message):
: # calls respond() to get response
In [3]: send_message("hello!")
Out[3]: USER: hello!
...: BOT : I can hear you! you said: hello!



EchoBot III
In [1]: import time In [2]: time.sleep(0
.
5
)
-----------------------------------------------------------------------------------------------------------------------

EchoBot I
Hello, World!

You'll begin learning how to build chatbots in Python by writing two functions to build the simplest bot possible: EchoBot. EchoBot just responds by replying with the same message it receives.

In this exercise, you'll define a function that responds to a user's message. In the next exercise, you'll complete EchoBot by writing a function to send a message to the bot.

Instructions
100 XP
Write a function called respond() with a single parameter message which returns the bot's response. To do this, concatenate the strings "I can hear you! You said: " and message.
Store the concatenated strings in bot_message, and return this result.


bot_template = "BOT : {0}"
user_template = "USER : {0}"

# Define a function that responds to a user's message: respond
def respond(message):
    # Concatenate the user's message to the end of a standard bot respone
    bot_message = "I can hear you! You said: " + message
    # Return the result
    return bot_message

-----------------------------------------------------------------------------------------------------------------------

EchoBot II
Having written your respond() function, you'll now define a function called send_message() with a single parameter message which logs the message and the bot's response.

Instructions
100 XP
Use the user_template string's .format() method to include the user's message into the user template, and print the result.
Call the respond() function with the message passed in and save the result as response.
Log the bot's response using the bot_template string's .format() method.
Send the message "hello" to the bot.

# Define a function that sends a message to the bot: send_message
def send_message(message):
    # Print user_template including the user_message
    print(user_template.format(message))
    # Get the bot's response to the message
    response = respond(message)
    # Print the bot template including the bot's response.
    print(bot_template.format(response))

# Send a message to the bot
send_message("hello")


<script.py> output:
    USER : hello
    BOT : I can hear you! You said: hello


-----------------------------------------------------------------------------------------------------------------------

Creating a personality


Why personality?
Difference between a command line app and a chatbot
Makes chatbots and voice assistants more accessible and fun to use
Your users will expect it!


S
m
allt
alk
I
n
[
1
]
:
r
e
s
p
o
n
s
e
s
=
{
:
"
w
h
a
t's
y
o
u
r
n
a
m
e
?
"
:
"
m
y
n
a
m
e
i
s
E
c
h
o
B
o
t
"
,
:
"
w
h
a
t's
t
h
e
w
e
a
t
h
e
r
t
o
d
a
y
?
"
:
"
i
t's
s
u
n
n
y!"
:
}
I
n
[
2
]
:
d
e
f
r
e
s
p
o
n
d
(
m
e
s
s
a
g
e
)
:
:
i
f
m
e
s
s
a
g
e
i
n
r
e
s
p
o
n
s
e
s
:
:
r
e
t
u
r
n
r
e
s
p
o
n
s
e
s
[
m
e
s
s
a
g
e
]
I
n
[
3
]
:
r
e
s
p
o
n
d
(
"
w
h
a
t's
y
o
u
r
n
a
m
e
?
"
)
O
u
t
[
3
]
: 'm
y
n
a
m
e
i
s
E
c
h
o
B
o
t'

Including variables
In [1]: responses = {
: "what's today's weather?": "it's {} today"
: }
In [2]: weather_today = "cloudy"
In [3]: def respond(message):
: if message in responses:
: return responses[message].format(weather_today)
:
In [4]: respond("what's today's weather?")
Out[4]: "it's cloudy today"



Choosing responses
In [1]: responses = {
: "what's your name?": [
: "my name is EchoBot"
,
: "they call me EchoBot"
,
: "the name's Bot, Echo Bot"
: ]
: }
In [2]: import random
In [3]: def respond(message):
: if message in responses:
: return random.choice(responses[message])
In [4]: respond("what's your name?")
Out[4]: "the name's Bot, Echo Bot"



Asking questions
In [1]: responses = [ "tell me more!"
,
"why do you think that?" ]
In [2]: import random
In [3]: def respond(message):
: return random.choice(responses)
In [4]: respond("I think you're really great")
Out[4]: 'why do you think that?'

----------------------------------------------------------------------------------------------------------------------------

Chitchat
Now you're going to leave simple EchoBot behind and create a bot which can answer simple questions such as "What's your name?" and "What's today's weather?"

You'll use a dictionary with these questions as keys, and the correct responses as values.

This means the bot will only respond correctly if the message matches exactly, which is a big limitation. In later exercises you will create much more robust solutions.

The send_message function has already been defined for you, as well as the bot_template and user_template variables.

Instructions 1/2
100 XP
1
2
Define a respond() function which takes in a message argument, checks if the message has a pre-defined response, and returns the response in the responses dictionary if there is a match, or the "default" message otherwise.

# Define variables
name = "Greg"
weather = "cloudy"

# Define a dictionary with the predefined responses
responses = {
  "what's your name?": "my name is {0}".format(name),
  "what's today's weather?": "the weather is {0}".format(weather),
  "default": "default message"
}

# Return the matching response if there is one, default otherwise
def respond(message):
    # Check if the message is in the responses
    if message in responses:
        # Return the matching message
        bot_message = responses[message]
    else:
        # Return the "default" message
        bot_message = responses["default"]
    return bot_message
		
		
----------------------------------------------------------------------------------------------------------------------------
Adding variety
It can get a little boring hearing the same old answers over and over. In this exercise, you'll add some variation. If you ask your bot how it's feeling, it may equally well respond with "oh I'm great!" as with "I'm very sad today".

Here, you'll use the random module - specifically random.choice(ls) - which randomly selects an element from a list ls.

A dictionary called responses, which maps each message to a list of possible responses, has been defined for you.

Instructions 1/2
100 XP
1
2
Import the random module.
Use random.choice() in the respond() function to choose one of the matching responses.


# Import the random module
import random

name = "Greg"
weather = "cloudy"

# Define a dictionary containing a list of responses for each message
responses = {
  "what's your name?": [
      "my name is {0}".format(name),
      "they call me {0}".format(name),
      "I go by {0}".format(name)
   ],
  "what's today's weather?": [
      "the weather is {0}".format(weather),
      "it's {0} today".format(weather)
    ],
  "default": ["default message"]
}

# Use random.choice() to choose a matching response
def respond(message):
    # Check if the message is in the responses
    if message in responses:
        # Return a random matching response
        bot_message = random.choice(responses[message])
    else:
        # Return a random "default" response
        bot_message = random.choice(responses["default"])
    return bot_message


----------------------------------------------------------------------------------------------------------------------------
ELIZA I: asking questions
Asking questions is a great way to create an engaging conversation. Here, you'll create the very first hint of ELIZA's famous personality, by responding to statements with a question and responding to questions with answers.

A dictionary of responses with "question" and "statement" as keys, and lists of appropriate responses as values has already been defined for you. Explore this in the Shell with responses.keys() and responses["question"].

Instructions
100 XP
Define a respond() function which takes in message as an argument, and uses the string's .endswith() method to check if a message ends with a question mark.
If the message does end with a question mark, choose a random "question" from the responses dictionary. Else, choose a random "statement" from the responses
Send the bot multiple messages with and without a question mark - a few have been provided for you. If you want to experiment further in the Shell, be sure to first hit 'Run Code'.


import random

def respond(message):
    # Check for a question mark
    if message.endswith("?"):
        # Return a random question
        return random.choice(responses["question"])
    # Return a random statement
    return random.choice(responses["statement"])


# Send messages ending in a question mark
send_message("what's today's weather?")
send_message("what's today's weather?")

# Send messages which don't end with a question mark
send_message("I love building chatbots")
send_message("I love building chatbots")



<script.py> output:
    USER : what's today's weather?
    BOT : you tell me!
    USER : what's today's weather?
    BOT : I don't know :(
    USER : I love building chatbots
    BOT : how long have you felt this way?
    USER : I love building chatbots
    BOT : I find that extremely interesting


----------------------------------------------------------------------------------------------------------------------------


Text processing with
regular expressions

Regular expressions
Match messages against known patterns
Extract key phrases
Transform sentences grammatically



The regex behind ELIZA
USER: "do you remember when you ate strawberries in the garden?"
ELIZA: "How could I forget when I ate strawberries in the garden?"


Pattern matching
In [1]: import re
In [2]: pattern = "do you remember .*"
In [3]: message = "do you remember when you ate strawberries in the garden"
In [4]: match = re.search(pattern, message)
In [5]: if match:
: print("string matches!")
Out[5]: string matches!


Extracting key phrases
In [1]: import re
In [2]: pattern = "if (.*)"
In [3]: message = "what would happen if bots took over the world"
In [4]: match = re.search(pattern, message)
In [5]: match.group(0)
Out[5]: 'what would happen if bots took over the world'
In [6]: match.group(1)
Out[6]: 'bots took over the world'



Grammatical transformation
In [1]: import re
In [2]: def swap_pronouns(phrase):
...: if 'I' in phrase:
...: return re.sub('I'
,
'you'
, phrase)
...: if 'my' in phrase:
...: return re.sub('my'
,
'your'
, phrase)
...:
...: else:
...: return phrase
In [3]: swap_pronouns("I walk my dog")
Out[3]: 'You walk your dog'




Putting it all together
In [1]: pattern = 'do you remember (.*)'
In [2]: message = 'do you remember when you ate strawberries in the garden'
In [3]: phrase = pattern.search(pattern, message).group(1)
In [4]: phrase
Out[4]: 'when you ate strawberries in the garden'
In [5]: response = choose_response(pattern)
In [6]: response
Out[6]: 'how could I forget {}'
In [7]: phrase = swap_pronouns(phrase)
In [8]: phrase
Out[8]: 'when I ate strawberries in the garden'
In [9]: response.format(phrase)
Out[9]: 'how could I forget when I ate strawberries in the garden'


----------------------------------------------------------------------------------------------------------------------------
ELIZA II: Extracting key phrases
The really clever thing about ELIZA is the way the program appears to understand what you told it, by occasionally including phrases uttered by the user in its responses.

In this exercise, you will match messages against some common patterns and extract phrases using re.search(). A dictionary called rules has already been defined, which matches the following patterns:

"do you think (.*)"
"do you remember (.*)"
"I want (.*)"
"if (.*)"
Inspect this dictionary in the Shell before starting the exercise.

Instructions
100 XP
Iterate over the rules dictionary using its .items() method, with pattern and responses as your iterator variables.
Use re.search() with the pattern and message to create a match object.
If there is a match, use random.choice() to pick a response.
If '{0}' is in that response, use the match object's .group() method with index 1 to retrieve a phrase.

# Define match_rule()
def match_rule(rules, message):
    response, phrase = "default", None
    
    # Iterate over the rules dictionary
    for pattern, responses in rules.items():
        # Create a match object
        match = re.search(pattern, message)
        if match is not None:
            # Choose a random response
            response = random.choice(responses)
            if '{0}' in response:
                phrase = match.group(1)
    # Return the response and phrase
    return response, phrase

# Test match_rule
print(match_rule(rules, "do you remember your last birthday"))


----------------------------------------------------------------------------------------------------------------------------

ELIZA III: Pronouns
To make responses grammatically coherent, you'll want to transform the extracted phrases from first to second person and vice versa. In English, conjugating verbs is easy, and simply swapping "I" and 'you', "my" and "your" works in most cases.

In this exercise, you'll define a function called replace_pronouns() which uses re.sub() to map "me" and "my" to "you" and "your" (and vice versa) in a string.

Instructions
100 XP
If 'me' is in message, use re.sub() to replace it with 'you'.
If 'my' is in message, replace it with 'your'.
If 'your' is in message', replace it with 'my', and if 'you' is in message, replace it with 'me'.


# Define replace_pronouns()
def replace_pronouns(message):

    message = message.lower()
    if 'me' in message:
        # Replace 'me' with 'you'
        return re.sub('me','you',message)
    if 'my' in message:
        # Replace 'my' with 'your'
        return re.sub('my','your',message)
    if 'your' in message:
        # Replace 'your' with 'my'
        return re.sub('your','my',message)
    if 'you' in message:
        # Replace 'you' with 'me'
        return re.sub('you','me',message)

    return message

print(replace_pronouns("my last birthday"))
print(replace_pronouns("when you went to Florida"))
print(replace_pronouns("I had my own castle"))

<script.py> output:
    your last birthday
    when me went to florida
    i had your own castle

----------------------------------------------------------------------------------------------------------------------------

ELIZA IV: Putting it all together
Now you're going to put it all together and experience the magic! The match_rule(), send_message(), and replace_pronouns() functions have already been defined, and the rules dictionary is available in your workspace.

Your job here is to write a function called respond() with a single argument message which creates an appropriate response to be handled by send_message.

Instructions
100 XP
Get a response and phrase by calling match_rule() with the rules dictionary and message.
Check if the response is a template by seeing if it includes the string '{0}'. If it does, use the replace_pronouns() function on phrase.
Include the phrase by using .format() on response and overriding the value of response.
Hit 'Submit Answer' to how the bot responds to the provided messages!


# Define respond()
def respond(message):
    # Call match_rule
    response, phrase = match_rule(rules, message)
    if '{0}' in response:
        # Replace the pronouns in the phrase
        phrase = replace_pronouns(phrase)
        # Include the phrase in the response
        response = response.format(phrase)
    return response

# Send the messages
send_message("do you remember your last birthday")
send_message("do you think humans should be worried about AI")
send_message("I want a robot friend")
send_message("what if you could be anything you wanted")


<script.py> output:
    USER : do you remember your last birthday
    BOT : Yes .. and?
    USER : do you think humans should be worried about AI
    BOT : No chance
    USER : I want a robot friend
    BOT : What would it mean if you got a robot friend
    USER : what if you could be anything you wanted
    BOT : Really--if me could be anything me wanted



=====================================================================================================================================



2
Understanding natural language
0%
Here, you'll use machine learning to turn natural language into structured data using spaCy, scikit-learn, and rasa NLU. You'll start with a refresher on the theoretical foundations, and then move on to building models using the ATIS dataset, which contains thousands of sentences from real people interacting with a flight booking system.

----------------------------------------------------------------------------------------------------------------------------
Understanding intents
and entities


Intents
A restaurant_search can be expressed many different ways:
I'm hungry
Show me good pizza spots
I want to take my boyfriend out for sushi
Can also be request_booking


Entities
NER = Named Entity Recognition



Regular expressions to recognize intents and exercises
Simpler than machine learning approaches
Highly computationally efficient
Drawback:
Debugging regular expressions can become difficult


Using regular expressions
'|' is equivalent to OR
\b matches the beginning or end of a word
In [1]: re.search(r"(hello|hey|hi)"
,
"hey there!") is not None
Out[1]: True
In [2]: re.search(r"(hello|hey|hi)"
,
"which one?") is not None
Out[2]: True
In [3]: re.search(r"\b(hello|hey|hi)\b"
,
"hey there!") is not None
Out[3]: True
In [4]: re.search(r"\b(hello|hey|hi)\b"
,
"which one?") is not None
Out[4]: False




Using regex for entity recognition
In [1]: pattern = re.compile('[A-Z]{1}[a-z]*')
In [2]: message = """
Mary is a friend of mine,
she studied at Oxford and
now works at Google"""
In [3]: pattern.findall(message)
Out[3]: ['Mary'
,
'Oxford'
,
'Google']

----------------------------------------------------------------------------------------------------------------------------
Intent classification with regex I
You'll begin by implementing a very simple way to recognise intents - just looking for the presence of keywords.

A dictionary keywords has already been defined. It has the intents "greet", "goodbye", and "thankyou" as keys, and lists of keywords as the corresponding values. For example, keywords["greet"] is set to "["hello","hi","hey"].

Also defined is a second dictionary, responses, indicating how the bot should respond to each of these intents. It also has a default response with the key "default".

The function send_message(), along with the bot and user templates have also already been defined. Your job in this exercise is to create a dictionary with the intents as keys and regex objects as values.

Instructions
100 XP
Iterate over the keywords dictionary, using intent and keys as your iterator variables.
Use '|'.join(keys) to create regular expressions to match at least one of the keywords.
Use re.compile() to compile the regular expressions into pattern objects. Store the result as the value of the patterns dictionary.


# Define a dictionary of patterns
patterns = {}

# Iterate over the keywords dictionary
for intent, keys in keywords.items():
    # Create regular expressions and compile them into pattern objects
    patterns[intent] = re.compile('|'.join(keys))
    
# Print the patterns
print(patterns)


<script.py> output:
    {'greet': re.compile('hello|hi|hey'), 'thankyou': re.compile('thank|thx'), 'goodbye': re.compile('bye|farewell')}
    
    
----------------------------------------------------------------------------------------------------------------------------
Intent classification with regex II
With your patterns dictionary created, it's now time to define a function to find the intent of a message.

Instructions
100 XP
Iterate over the intents and patterns in the patterns dictionary using its .items() method.
Use the .search() method of pattern to look for keywords in the message.
If there is a match, return the corresponding intent.
Call your match_intent() function inside respond() with message as the argument and then hit 'Submit Answer' to see how the bot responds to the provided messages.

# Define a function to find the intent of a message
def match_intent(message):
    matched_intent = None
    for intent, pattern in patterns.items():
        # Check if the pattern occurs in the message 
        if pattern.search(message):
            matched_intent = intent
    return matched_intent

# Define a respond function
def respond(message):
    # Call the match_intent function
    intent = match_intent(message)
    # Fall back to the default response
    key = "default"
    if intent in responses:
        key = intent
    return responses[key]

# Send messages
send_message("hello!")
send_message("bye byeee")
send_message("thanks very much!")

<script.py> output:
    USER : hello!
    BOT : Hello you! :)
    USER : bye byeee
    BOT : goodbye for now
    USER : thanks very much!
    BOT : you are very welcome

    ----------------------------------------------------------------------------------------------------------------------------
    
    
    Entity extraction with regex
Now you'll use another simple method, this time for finding a person's name in a sentence such as "hello, my name is David Copperfield".

You'll look for the keywords "name" or "call(ed)", and find capitalized words using regex and assume those are names. Your job in this exercise is to define a find_name() function to do this.

Instructions
100 XP
Use re.compile() to create a pattern for checking if "name" or "call" keywords occur.
Create a pattern for finding capitalized words.
Use the .findall() method on name_pattern to retrieve all matching words in message.
Call your find_name() function inside respond() and then hit 'Submit Answer' to see how the bot responds to the provided messages.
    
    
    # Define find_name()
def find_name(message):
    name = None
    # Create a pattern for checking if the keywords occur
    name_keyword = re.compile('name|call')
    # Create a pattern for finding capitalized words
    name_pattern = re.compile('[A-Z]{1}[a-z]*')
    if name_keyword.search(message):
        # Get the matching words in the string
        name_words = name_pattern.findall(message)
        if len(name_words) > 0:
            # Return the name if the keywords are present
            name = ' '.join(name_words)
    return name

# Define respond()
def respond(message):
    # Find the name
    name = find_name(message)
    if name is None:
        return "Hi there!"
    else:
        return "Hello, {0}!".format(name)

# Send messages
send_message("my name is David Copperfield")
send_message("call me Ishmael")
send_message("People call me Cassandra")

# Define find_name()
def find_name(message):
    name = None
    # Create a pattern for checking if the keywords occur
    name_keyword = re.compile('name|call')
    # Create a pattern for finding capitalized words
    name_pattern = re.compile('[A-Z]{1}[a-z]*')
    if name_keyword.search(message):
        # Get the matching words in the string
        name_words = name_pattern.findall(message)
        if len(name_words) > 0:
            # Return the name if the keywords are present
            name = ' '.join(name_words)
    return name

# Define respond()
def respond(message):
    # Find the name
    name = find_name(message)
    if name is None:
        return "Hi there!"
    else:
        return "Hello, {0}!".format(name)

# Send messages
send_message("my name is David Copperfield")
send_message("call me Ishmael")
send_message("People call me Cassandra")
----------------------------------------------------------------------------------------------------------------------------
Word vectors

Machine learning
Programs which can get better at a task by being exposed to more
data
Identifying which intent a user message belongs to



Vector representations
"can you help me please?"
Units examples vectors
characters "c"
,
"a"
,
"n"
, ... v_c, v_a, v_n, ...
words "can"
,
"you"
, ... v_{can}, v_{you}, ...
sentences "can you help..." v_{can you help ...}


Word vectors
Context Candidates
let's meet at the ___ tomorrow office, gym, park, beach, party
I love going to the ___ to play with the dogs beach, park
Word vectors try to represent meaning of words
Words which appear in similar context have similar vectors


Word vectors are computationally intensive
Training word vectors requires a lot of data
High quality word vectors are available for anyone to use
GloVe algorithm
Cousin of word2vec
spaCy


Word vectors in spaCy
In [1]: import spacy
In [2]: nlp = spacy.load('en')
In [3]: nlp.vocab.vectors_length
Out[3]: 300
In [4]: doc = nlp('hello can you help me?')
In [5]: for token in doc:
...: print("{} : {}".format(token, token.vector[:3]))
hello : [ 0.25233001 0.10176 -0.67484999]
can : [-0.23857 0.35457 -0.30219001]
you : [-0.11076 0.30785999 -0.51980001]
help : [-0.29370001 0.32253 -0.44779 ]
me : [-0.15396 0.31894001 -0.54887998]
? : [-0.086864 0.19160999 0.10915 ]


Similarity
Direction of vectors matters
"Distance" between words = angle between the vectors
Cosine similarity
1: If vectors point in the same direction
0: If they are perpendicular
-1: If they point in opposite directions


.similarity()
"can" and "cat" are spelled similarly but have low similarity
but "cat" and "dog" have high similarity
In [1]: import spacy
In [2]: nlp = spacy.load('en')
In [3]: doc = nlp("cat")
In [4]: doc.similarity(nlp("can"))
Out[4]: 0.30165292161215396
In [5]: doc.similarity(nlp("dog"))
Out[5]: 0.80168555173294953


----------------------------------------------------------------------------------------------------------------------------

word vectors with spaCy
In this exercise you'll get your first experience with word vectors! You're going to use the ATIS dataset, which contains thousands of sentences from real people interacting with a flight booking system.

The user utterances are available in the list sentences, and the corresponding intents in labels.

Your job is to create a 2D array X with as many rows as there are sentences in the dataset, where each row is a vector describing that sentence.

Instructions
100 XP
Load the spaCy English model by calling spacy.load() with argument 'en'.
Calculate the length of sentences using len() and the dimensionality of the word vectors using nlp.vocab.vectors_length.
For each sentence, call the nlp object with the sentence as the sole argument. Store the result as doc.
Use the .vector attribute of doc to get the vector representation of each sentence, and store this vector in the appropriate row of X.


# Load the spacy model: nlp
nlp = spacy.load('en')

# Calculate the length of sentences
n_sentences = len(sentences)

# Calculate the dimensionality of nlp
embedding_dim = nlp.vocab.vectors_length

# Initialize the array with zeros: X
X = np.zeros((n_sentences, embedding_dim))

# Iterate over the sentences
for idx, sentence in enumerate(sentences):
    # Pass each each sentence to the nlp object to create a document
    doc = nlp(sentence)
    # Save the document's .vector attribute to the corresponding row in X
    X[idx, :] = doc.vector



----------------------------------------------------------------------------------------------------------------------------
Intents and
classification



Supervised learning
A classifier predicts the intent label given a sentence
'Fit' classifier by tuning it on training data
Evaluate performance on test data
Accuracy: the fraction of labels we predict correctly


ATIS dataset
Thousands of sentences with labeled intents and entities
Collected from a real flight booking service
Intents like
atis_flight
atis_airfare



ATIS dataset II
In [1]: sentences_train[:2]
Out[1]: [
"i want to fly from boston at 838 am
and arrive in denver at 1110 in the morning"
,
"what flights are available from pittsburgh
to baltimore on thursday morning"
]
In [2]: labels_train[:2]
Out[2]: [
"atis_flight"
,
"atis_flight"
]
In [3]: import numpy as np
In [4]: X_train_shape = (len(sentences_train),nlp.vocab.vectors_length)
In [5]: X_train = np.zeros(X_train_shape)
In [6]: for sentence in sentences_train:
...: X_train[i,:] = nlp(sentence).vector



Nearest neighbor classification
Need training data
Sentences which we've already labeled with their intents
Simplest solution:
Look for the labeled example that's most similar
Use its intent as a best guess
Nearest neighbor classification


Nearest neighbor classification in scikit-learn
In [1]: from sklearn.metrics.pairwise import cosine_similarity
In [2]: test_message = """
i would like to find a flight from charlotte
to las vegas that makes a stop in st. louis"""
In [3]: test_x = nlp(test_message).vector
In [4]: scores = [
...: cosine_similarity(X[i,:], test_x)
...: for i in range(len(sentences_train)
...: ]
In [5]: labels_train[np.argmax(scores)]
Out[5]: 'atis_flight'


Support vector machines
Nearest neighbours is very simple - we can do better
SVM / SVC: support vector machine / classifier
In [1]: from sklearn.svm import SVC
In [2]: clf = SVC()
In [3]: clf.fit(X_train, y_train)
In [4]: y_pred = clf.predict(X_test)

----------------------------------------------------------------------------------------------------------------------------

Intent classification with sklearn
An array X containing vectors describing each of the sentences in the ATIS dataset has been created for you, along with a 1D array y containing the labels. The labels are integers corresponding to the intents in the dataset. For example, label 0 corresponds to the intent atis_flight.

Now, you'll use the scikit-learn library to train a classifier on this same dataset. Specifically, you will fit and evaluate a support vector classifier.

Instructions
100 XP
Import the SVC class from sklearn.svm.
Instantiate a classifier clf by calling SVC with a single keyword argument C with value 1.
Fit the classifier to the training data X_train and y_train.
Predict the labels of the test set, X_test.


# Import SVC
from sklearn.svm import SVC

# Create a support vector classifier
clf = SVC(C=1)

# Fit the classifier using the training data
clf.fit(X_train, y_train)

# Predict the labels of the test set
y_pred = clf.predict(X_test)

# Count the number of correct predictions
n_correct = 0
for i in range(len(y_test)):
    if y_pred[i] == y_test[i]:
        n_correct += 1

print("Predicted {0} correctly out of {1} test examples".format(n_correct, len(y_test)))


<script.py> output:
    Predicted 162 correctly out of 201 test examples
    
    


----------------------------------------------------------------------------------------------------------------------------

Entity extraction

Beyond keywords: Context
Keywords don't work for entities you haven't seen before
Use contextual clues:
Spelling
Capitalization
Words occurring before & after
Pattern recognition


Pre-built Named Entity Recognition
In [1]: import spacy
In [2]: nlp = spacy.load('en')
In [3]: doc = nlp("my friend Mary has worked at Google since 2009")
In [4]: for ent in doc.ents:
...: print(ent.text, ent.label_)
...:
Mary PERSON
Google ORG
2009 DATE




Roles
In [1]: pattern_1 = re.compile('.* from (.*) to (.*)')
In [2]: pattern_2 = re.compile('.* to (.*) from (.*)')



Dependency parsing
In [1]: doc = nlp('a flight to Shanghai from Singapore')
In [2]: shanghai, singapore = doc[3], doc[5]
In [3]: list(shanghai.ancestors)
Out[3]: [from, flight]
In [4]: list(singapore.ancestors)
Out[4]: [to, flight]



Shopping example
In [1]: doc = nlp("let's see that jacket in red and some blue jeans")
In [2]: items = [doc[4], doc[10]] # [jacket, jeans]
In [3]: colors = [doc[6], doc[9]] # [red, blue]
In [4]: for color in colors:
...: for tok in color.ancestors:
...: if tok in items:
...: print("color {} belongs to item {}".format(color, tok))
...: break
color red belongs to item jacket
color blue belongs to item jeans

----------------------------------------------------------------------------------------------------------------------------





----------------------------------------------------------------------------------------------------------------------------

Robust NLU with Rasa

Rasa NLU
Library for intent recognition & entity extraction
Based on spaCy, scikit-learn, & other libraries
Built in support for chatbot specific tasks



Rasa data format
In [1]: from rasa_nlu.converters import load_data
In [2]: training_data = load_data("./training_data.json")
In [3]: import json
In [4]: print(json.dumps(data.training_examples[22], indent=2))
Out[4]: {
"text": "i'm looking for a place in the north of town"
,
"intent": "restaurant_search"
,
"entities": [
{
"start": 31,
"end": 36,
"value": "north"
,
"entity": "location"
}
]
}



Interpreters In [1]: message = "I want to book a flight to London" In [2]: interpreter.parse(message)) Out[2]: { "intent": { "name": "flight_search", "confidence": 0.9 },"entities": [ { "entity": "location", "value": "London", "start": 27, "end": 33 } ] }


Rasa usage
# Creating a model
In [1]: from rasa_nlu.config import RasaNLUConfig
In [2]: from rasa_nlu.model import Trainer
In [3]: config = RasaNLUConfig(cmdline_args={"pipeline": "spacy_sklearn"})
In [4]: trainer = Trainer(config)
In [5]: interpreter = trainer.train(training_data)


Rasa pipelines
In [1]: spacy_sklearn_pipeline = [
"nlp_spacy"
,
"ner_crf"
,
"ner_synonyms"
,
"intent_featurizer_spacy"
,
"intent_classifier_sklearn"
]
# These two statements are identical:
In [2]: RasaNLUConfig(
cmdline_args={"pipeline": spacy_sklearn_pipeline}
)
Out[2]: <rasa_nlu.config.RasaNLUConfig at 0x10f60aa90>
In [3]: RasaNLUConfig(
cmdline_args={"pipeline": "spacy_sklearn"}
)
Out[3]: <rasa_nlu.config.RasaNLUConfig at 0x10f60aa20>



Conditional random fields
Machine Learning model, popular for named entity recognition
can perform well even with small training data



Handling typos
In [1]: pipeline = [
...: "nlp_spacy"
,
...: "intent_featurizer_spacy"
,
...: "intent_featurizer_ngrams"
,
...: "intent_classifier_sklearn"
...: ]






=====================================================================================================================================


3
Building a virtual assistant
0%
In this chapter, you're going to build a personal assistant to help you plan a trip. It will be able to respond to questions like "are there any cheap hotels in the north of town?" by looking inside a hotels database for matching results.



=====================================================================================================================================


4
Dialogue
0%
Everything you've built so far has statelessly mapped intents to actions & responses. It's amazing how far you can get with that! But to build more sophisticated bots you will always want to add some statefulness. That's what you'll do here, as you build a chatbot that helps users order coffee. Have fun!

